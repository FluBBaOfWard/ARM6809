//
//  ARM6809.s
//  ARM6809
//
//  Created by Fredrik Ahlström on 2008-07-14.
//  Copyright © 2008-2022 Fredrik Ahlström. All rights reserved.
//

#ifdef __arm__

#include "ARM6809mac.h"

	.syntax unified
	.arm

#if defined(NDS) && !defined(NO_FASTMEM_6809)
	.section .itcm						;@ For the NDS ARM9
#elif defined(GBA)
	#if !defined(NO_FASTMEM_6809)
	.section .iwram, "ax", %progbits	;@ For the GBA
	#else
	.section .ewram, "ax"				;@ For the GBA
	#endif
#else
	.section .text						;@ For anything else
#endif
	.align 2


	.global m6809Reset
	.global m6809SetNMIPin
	.global m6809SetFIRQPin
	.global m6809SetIRQPin
	.global m6809RestoreAndRunXCycles
	.global m6809RunXCycles
	.global m6809CheckIrqs
	.global m6809SaveState
	.global m6809LoadState
	.global m6809GetStateSize

	.global m6809OpTable



#ifdef KONAMI6809
decodeOpCode:
	loadLastBank r1
	sub r1,m6809pc,r1

	ldrb r0,[m6809pc],#1

	eor r0,r0,#0x22
	tst r1,#0x02
	eorne r0,r0,#0xA0
	tst r1,#0x08
	eorne r0,r0,#0x0A

	ldr pc,[m6809optbl,r0,lsl#2]
#endif

;@----------------------------------------------------------------------------
_00:	;@ NEG Direct
;@----------------------------------------------------------------------------
	readMemDP8
	opNEG
	writeMem8
	fetch 6
;@----------------------------------------------------------------------------
_03:	;@ COM Direct
;@----------------------------------------------------------------------------
	readMemDP8
	opCOM
	writeMem8
	fetch 6
;@----------------------------------------------------------------------------
_04:	;@ LSR Direct
;@----------------------------------------------------------------------------
	readMemDP8
	opLSR
	writeMem8
	fetch 6
;@----------------------------------------------------------------------------
_06:	;@ ROR Direct
;@----------------------------------------------------------------------------
	readMemDP8
	opROR
	writeMem8
	fetch 6
;@----------------------------------------------------------------------------
_07:	;@ ASR Direct
;@----------------------------------------------------------------------------
	readMemDP8
	opASR
	writeMem8
	fetch 6
;@----------------------------------------------------------------------------
_08:	;@ LSL Direct
;@----------------------------------------------------------------------------
	readMemDP8
	opLSL
	writeMem8
	fetch 6
;@----------------------------------------------------------------------------
_09:	;@ ROL Direct
;@----------------------------------------------------------------------------
	readMemDP8
	opROL
	writeMem8
	fetch 6
;@----------------------------------------------------------------------------
_0A:	;@ DEC Direct
;@----------------------------------------------------------------------------
	readMemDP8
	opDEC
	writeMem8
	fetch 6
;@----------------------------------------------------------------------------
_0C:	;@ INC Direct
;@----------------------------------------------------------------------------
	readMemDP8
	opINC
	writeMem8
	fetch 6
;@----------------------------------------------------------------------------
_0D:	;@ TST Direct
;@----------------------------------------------------------------------------
	readMemDP8
	opTST
	fetch 6
;@----------------------------------------------------------------------------
_0E:	;@ JMP Direct
;@----------------------------------------------------------------------------
	ldrb addy,[m6809pc],#1
	orr addy,m6809dp,addy,lsl#16
	opJMPEA
	fetch 3
;@----------------------------------------------------------------------------
_0F:	;@ CLR direct
;@----------------------------------------------------------------------------
	opCLR
	writeMemDP8
	fetch 6
;@----------------------------------------------------------------------------
;@_10:	;@ Page1 Extension
;@----------------------------------------------------------------------------
;@----------------------------------------------------------------------------
;@_11:	;@ Page2 Extension
;@----------------------------------------------------------------------------
;@----------------------------------------------------------------------------
_1B:	;@ NOP, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
;@----------------------------------------------------------------------------
_12:	;@ NOP
;@----------------------------------------------------------------------------
	fetch 2
;@----------------------------------------------------------------------------
_13:	;@ SYNC				Wait until an IRQ pin is set.
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
;@	sub m6809pc,m6809pc,#1
	eatCycles 2								;@ Instruction takes 2 cycles at least
	mvns r0,cycles,asr#CYC_SHIFT+1			;@
	addmi cycles,cycles,r0,lsl#CYC_SHIFT+1	;@ Consume all remaining cycles in steps of 2.
	orr cycles,cycles,#CYC_SYNC
	ldr pc,[m6809optbl,#m6809NextTimeout]
;@----------------------------------------------------------------------------
_1020:	;@ LBRA				Long Branch Allways
;@----------------------------------------------------------------------------
;@----------------------------------------------------------------------------
_16:	;@ LBRA
;@----------------------------------------------------------------------------
	readMemIM16S
	add m6809pc,m6809pc,r0
	fetch 5
;@----------------------------------------------------------------------------
_17:	;@ LBSR
;@----------------------------------------------------------------------------
	loadLastBank r0
	sub r0,m6809pc,r0
	add r0,r0,#2
	bl pushSP16
	readMemIM16S
	add m6809pc,m6809pc,r0
	fetch 9
;@----------------------------------------------------------------------------
_19:	;@ DAA				Decimal Adjust Accumulator
;@----------------------------------------------------------------------------
;@	mov r11,r11					;@ No$GBA breakpoint
	mov r0,#0x60000000

	adds r1,r0,m6809a,ror#28	;@ Check low nybble and save top nybble for H check
	tstcc m6809f,m6809f,lsr#6	;@ PSR_H to carry.
	orrcs r0,r0,#0x06000000

	cmn m6809a,r0
	tstcc m6809f,m6809f,lsr#2	;@ PSR_C to carry.
	biccc r0,r0,#0x60000000

	adds m6809a,m6809a,r0
	mrs r0,cpsr					;@ N,Z,V&C
	bic m6809f,m6809f,#0x0F		;@ Clear N,Z,V&C flags
	orr m6809f,m6809f,r0,lsr#28
;@	bic m6809f,m6809f,#PSR_V	;@ V is undefined
	fetch 2
;@----------------------------------------------------------------------------
_1A:	;@ ORCC
;@----------------------------------------------------------------------------
	readMemIM8
	decodeFLG
	orr m6809f,m6809f,r0
	fetch 3
;@----------------------------------------------------------------------------
_1C:	;@ ANDCC
;@----------------------------------------------------------------------------
	readMemIM8
	decodeFLG
	eor r0,r0,#0xFF
	bic m6809f,m6809f,r0
	fetch 3
;@----------------------------------------------------------------------------
_1D:	;@ SEX		-**0-
;@----------------------------------------------------------------------------
	bic m6809f,m6809f,#PSR_N|PSR_Z|PSR_V		;@ V not cleared on HD6809?
	movs m6809a,m6809b,asr#7
	orrmi m6809f,m6809f,#PSR_N
	orreq m6809f,m6809f,#PSR_Z
	and m6809a,m6809a,#0xFF000000
	fetch 2
;@----------------------------------------------------------------------------
_1E:	;@ EXG
;@----------------------------------------------------------------------------
	readMemIM8
	mov r2,r0
	mov r0,r2,lsr#4
	adr r1,fetchTbl
	adr lr,exchgReg
	ldr pc,[r1,r0,lsl#2]

exchgReg:
;@-------------------------------------
	and r0,r2,#0x0F
	mov r2,r2,lsr#4
	adr lr,exgStore
	ldr pc,[pc,r0,lsl#2]
	.long 0
exgTbl:
	.long exgD, exgX, exgY, exgU, exgS, exgPC, exgMinus, exgMinus
	.long exgA, exgB, exgF, exgDP, exgMinus, exgMinus, exgMinus, exgMinus
;@----------------------------------------------------------------------------
_1F:	;@ TFR
;@----------------------------------------------------------------------------
	readMemIM8
	and r2,r0,#0x0F
	mov r0,r0,lsr#4
	adr lr,tfrStore
	ldr pc,[pc,r0,lsl#2]
	.long 0
fetchTbl:
	.long fetchD, fetchX, fetchY, fetchU, fetchS, fetchPC, fetchMinus, fetchMinus
	.long fetchA, fetchB, fetchF, fetchDP, fetchMinus, fetchMinus, fetchMinus, fetchMinus
;@-------------------------------------
exgStore:
	eatcycles 2
	mov addy,r1
tfrStore:
	adr lr,tfrEnd
	ldr pc,[pc,r2,lsl#2]
	.long 0
storeTbl:
	.long storeD, storeX, storeY, storeU, storeS, storePC, storeMinus, storeMinus
	.long storeA, storeB, storeF, storeDP, storeMinus, storeMinus, storeMinus, storeMinus
tfrEnd:
	fetch 6

;@----------------------------------------------------------------------------
fetchD:							;@ #0 = D
	orr addy,m6809a,m6809b,lsr#8
	bx lr
fetchX:							;@ #1 = X
	mov addy,m6809x
	bx lr
fetchY:							;@ #2 = Y
	mov addy,m6809y
	bx lr
fetchU:							;@ #3 = U
	ldr addy,[m6809optbl,#m6809US]
	bx lr
fetchS:							;@ #4 = S
	mov addy,m6809sp
	bx lr
fetchPC:						;@ #5 = PC
	loadLastBank addy
	sub addy,m6809pc,addy
	mov addy,addy,lsl#16
	bx lr
fetchA:							;@ #8 = A
	orr addy,m6809a,m6809a,lsr#8
	bx lr
fetchB:							;@ #9 = B
	orr addy,m6809b,m6809b,lsr#8
	bx lr
fetchF:							;@ #A = F
	ands addy,m6809f,#VF|CF
	teqne addy,#VF|CF
	mov addy,m6809f,lsl#24
	eorne addy,addy,#(VF|CF)<<24
	orr addy,addy,addy,lsr#8
	bx lr
fetchDP:						;@ #B = DP
	and addy,m6809dp,#0xFF000000
	orr addy,addy,addy,lsr#8
	bx lr
fetchMinus:						;@ #6,7,C,D,E,F
	mov addy,#-1
	mov addy,addy,lsl#16
	bx lr

;@----------------------------------------------------------------------------
exgD:							;@ #0 = D
	orr r1,m6809a,m6809b,lsr#8
	and m6809a,addy,#0xFF000000
	mov m6809b,addy,lsl#8
	bx lr
exgX:							;@ #1 = X
	mov r1,m6809x
	mov m6809x,addy
	bx lr
exgY:							;@ #2 = Y
	mov r1,m6809y
	mov m6809y,addy
	bx lr
exgU:							;@ #3 = U
	ldr r1,[m6809optbl,#m6809US]
	str addy,[m6809optbl,#m6809US]
	bx lr
exgS:							;@ #4 = S
	mov r1,m6809sp
	mov m6809sp,addy
	bx lr
exgPC:							;@ #5 = PC
	loadLastBank r1
	sub r1,m6809pc,r1
	mov r1,r1,lsl#16
	b storePC
exgA:							;@ #8 = A
	orr r1,m6809a,m6809a,lsr#8
	and m6809a,addy,#0xFF000000
	bx lr
exgB:							;@ #9 = B
	orr r1,m6809b,m6809b,lsr#8
	mov m6809b,addy,lsl#8
	bx lr
exgDP:							;@ #B = DP
	orr r1,m6809dp,m6809dp,lsr#8
	and m6809dp,m6809dp,#0x000000FF
	and addy,addy,#0xFF000000
	orr m6809dp,m6809dp,addy
	bx lr
exgMinus:						;@ #6,7,C,D,E,F
	mov r1,#-1
	mov r1,r1,lsl#16
	bx lr

;@----------------------------------------------------------------------------
storeD:							;@ #0 = D
	and m6809a,addy,#0xFF000000
	mov m6809b,addy,lsl#8
	bx lr
storeX:							;@ #1 = X
	mov m6809x,addy
	bx lr
storeY:							;@ #2 = Y
	mov m6809y,addy
	bx lr
storeU:							;@ #3 = U
	str addy,[m6809optbl,#m6809US]
	bx lr
storeS:							;@ #4 = S
	mov m6809sp,addy
	bx lr
storePC:						;@ #5 = PC
	mov m6809pc,addy,lsr#16
	encodePC
	bx lr
storeA:							;@ #8 = A
	and m6809a,addy,#0xFF000000
	bx lr
storeB:							;@ #9 = B
	mov m6809b,addy,lsl#8
	bx lr
storeDP:						;@ #B = DP
	and m6809dp,m6809dp,#0x000000FF
	and addy,addy,#0xFF000000
	orr m6809dp,m6809dp,addy
storeMinus:						;@ #6,7,C,D,E,F
	bx lr

;@----------------------------------------------------------------------------
exgF:						;@ Exchange F register.
;@----------------------------------------------------------------------------
//	mov r11,r11					;@ No$GBA breakpoint
	ands r1,m6809f,#VF|CF
	teqne r1,#VF|CF
	mov r1,m6809f,lsl#24
	eorne r1,r1,#(VF|CF)<<24
	orr r1,r1,r1,lsr#8
storeF:							;@ #A = F
	and m6809f,m6809f,#0xFF000000
	and r0,addy,#0xFF0000
	orr m6809f,m6809f,r0,lsr#16
	ands r0,m6809f,#VF|CF
	teqne r0,#VF|CF
	eorne m6809f,m6809f,#VF|CF
	bx lr

;@----------------------------------------------------------------------------
_20:	;@ BRA				Branch Allways
;@----------------------------------------------------------------------------
	ldrsb r0,[m6809pc],#1
	add m6809pc,m6809pc,r0
	fetch 3
;@----------------------------------------------------------------------------
_1021:	;@ LBRN				Long Branch Never
;@----------------------------------------------------------------------------
	eatcycles 1
	add m6809pc,m6809pc,#1
;@----------------------------------------------------------------------------
_21:	;@ BRN				Branch Never
;@----------------------------------------------------------------------------
	add m6809pc,m6809pc,#1
	fetch 3
;@----------------------------------------------------------------------------
_22:	;@ BHI				Unsigned Higher (!(Z|C))
;@----------------------------------------------------------------------------
	opBRANCH_EQ PSR_Z|PSR_C
;@----------------------------------------------------------------------------
_1022:	;@ LBHI				Long Branch Higher (!(Z|C))
;@----------------------------------------------------------------------------
	opLBRANCH_EQ PSR_Z|PSR_C
;@----------------------------------------------------------------------------
_23:	;@ BLS				Unsigned Lower or Same (Z|C)
;@----------------------------------------------------------------------------
	opBRANCH_NE PSR_Z|PSR_C
;@----------------------------------------------------------------------------
_1023:	;@ LBLS				Long Branch Lower or Same (Z|C)
;@----------------------------------------------------------------------------
	opLBRANCH_NE PSR_Z|PSR_C
;@----------------------------------------------------------------------------
_24:	;@ BHS, BCC			!C
;@----------------------------------------------------------------------------
	opBRANCH_EQ PSR_C
;@----------------------------------------------------------------------------
_1024:	;@ LBHS, BCC		!C
;@----------------------------------------------------------------------------
	opLBRANCH_EQ PSR_C
;@----------------------------------------------------------------------------
_25:	;@ BLO, BCS			C
;@----------------------------------------------------------------------------
	opBRANCH_NE PSR_C
;@----------------------------------------------------------------------------
_1025:	;@ LBLO, BCS		C
;@----------------------------------------------------------------------------
	opLBRANCH_NE PSR_C
;@----------------------------------------------------------------------------
_26:	;@ BNE				!Z
;@----------------------------------------------------------------------------
	opBRANCH_EQ PSR_Z
;@----------------------------------------------------------------------------
_1026:	;@ LBNE				!Z
;@----------------------------------------------------------------------------
	opLBRANCH_EQ PSR_Z
;@----------------------------------------------------------------------------
_27:	;@ BEQ				Z
;@----------------------------------------------------------------------------
	opBRANCH_NE PSR_Z
;@----------------------------------------------------------------------------
_1027:	;@ LBEQ				Z
;@----------------------------------------------------------------------------
	opLBRANCH_NE PSR_Z
;@----------------------------------------------------------------------------
_28:	;@ BVC				!V
;@----------------------------------------------------------------------------
	opBRANCH_EQ PSR_V
;@----------------------------------------------------------------------------
_1028:	;@ LBVC				!V
;@----------------------------------------------------------------------------
	opLBRANCH_EQ PSR_V
;@----------------------------------------------------------------------------
_29:	;@ BVS				V
;@----------------------------------------------------------------------------
	opBRANCH_NE PSR_V
;@----------------------------------------------------------------------------
_1029:	;@ LBVS				V
;@----------------------------------------------------------------------------
	opLBRANCH_NE PSR_V
;@----------------------------------------------------------------------------
_2A:	;@ BPL				!N
;@----------------------------------------------------------------------------
	opBRANCH_EQ PSR_N
;@----------------------------------------------------------------------------
_102A:	;@ LBPL				!N
;@----------------------------------------------------------------------------
	opLBRANCH_EQ PSR_N
;@----------------------------------------------------------------------------
_2B:	;@ BMI				N
;@----------------------------------------------------------------------------
	opBRANCH_NE PSR_N
;@----------------------------------------------------------------------------
_102B:	;@ LBMI				N
;@----------------------------------------------------------------------------
	opLBRANCH_NE PSR_N
;@----------------------------------------------------------------------------
_2C:	;@ BGE				!N^V
;@----------------------------------------------------------------------------
	eor r0,m6809f,m6809f,lsr#3
	tst r0,#PSR_V
	opBEQ_END
;@----------------------------------------------------------------------------
_102C:	;@ LBGE				!N^V
;@----------------------------------------------------------------------------
	eor r0,m6809f,m6809f,lsr#3
	tst r0,#PSR_V
	opLBEQ_END
;@----------------------------------------------------------------------------
_2D:	;@ BLT				N^V
;@----------------------------------------------------------------------------
	eor r0,m6809f,m6809f,lsr#3
	tst r0,#PSR_V
	opBNE_END
;@----------------------------------------------------------------------------
_102D:	;@ LBLT				N^V
;@----------------------------------------------------------------------------
	eor r0,m6809f,m6809f,lsr#3
	tst r0,#PSR_V
	opLBNE_END
;@----------------------------------------------------------------------------
_2E:	;@ BGT				!((N^V)|Z)
;@----------------------------------------------------------------------------
	mov r0,m6809f,lsl#28
	msr cpsr_f,r0				;@ N,Z,V&C
	ldrsb r0,[m6809pc],#1
	addgt m6809pc,m6809pc,r0
	fetch 3
;@----------------------------------------------------------------------------
_102E:	;@ LBGT				!((N^V)|Z)
;@----------------------------------------------------------------------------
	mov r0,m6809f,lsl#28
	msr cpsr_f,r0				;@ N,Z,V&C
	readMemIM16S
	addgt m6809pc,m6809pc,r0
	subgt cycles,cycles,#CYCLE
	fetch 4
;@----------------------------------------------------------------------------
_2F:	;@ BLE				(N^V)|Z
;@----------------------------------------------------------------------------
	mov r0,m6809f,lsl#28
	msr cpsr_f,r0				;@ N,Z,V&C
	ldrsb r0,[m6809pc],#1
	addle m6809pc,m6809pc,r0
	fetch 3
;@----------------------------------------------------------------------------
_102F:	;@ LBLE				(N^V)|Z
;@----------------------------------------------------------------------------
	mov r0,m6809f,lsl#28
	msr cpsr_f,r0				;@ N,Z,V&C
	readMemIM16S
	addle m6809pc,m6809pc,r0
	suble cycles,cycles,#CYCLE
	fetch 4
;@----------------------------------------------------------------------------
_30:	;@ LEAX
;@----------------------------------------------------------------------------
	bl fetchIdxAdr
	movs m6809x,addy
	bic m6809f,m6809f,#PSR_Z
	orreq m6809f,m6809f,#PSR_Z
	fetch 4
;@----------------------------------------------------------------------------
_31:	;@ LEAY
;@----------------------------------------------------------------------------
	bl fetchIdxAdr
	movs m6809y,addy
	bic m6809f,m6809f,#PSR_Z
	orreq m6809f,m6809f,#PSR_Z
	fetch 4
;@----------------------------------------------------------------------------
_32:	;@ LEAS
;@----------------------------------------------------------------------------
	bl fetchIdxAdr
	mov m6809sp,addy
	fetch 4
;@----------------------------------------------------------------------------
_33:	;@ LEAU
;@----------------------------------------------------------------------------
	bl fetchIdxAdr
	str addy,[m6809optbl,#m6809US]
	fetch 4
;@----------------------------------------------------------------------------
_34:	;@ PSHS #xx
;@----------------------------------------------------------------------------
	readMemIM8
	bl pushRegistersSPR0
	fetch 5
;@----------------------------------------------------------------------------
_35:	;@ PULS #xx
;@----------------------------------------------------------------------------
	readMemIM8
	bl pullRegistersSPR0
	fetch 5
;@----------------------------------------------------------------------------
_36:	;@ PSHU #xx
;@----------------------------------------------------------------------------
	readMemIM8
	bl pushRegistersUSR0
	fetch 5
;@----------------------------------------------------------------------------
_37:	;@ PULU #xx
;@----------------------------------------------------------------------------
	readMemIM8
	bl pullRegistersUSR0
	fetch 5
;@----------------------------------------------------------------------------
_39:	;@ RTS
;@----------------------------------------------------------------------------
	bl pullSP16
	mov m6809pc,r0
	encodePC
	fetch 5
;@----------------------------------------------------------------------------
_3A:	;@ ABX				Add unsigned B to X
;@----------------------------------------------------------------------------
	opABX
	fetch 3
;@----------------------------------------------------------------------------
_3B:	;@ RTI
;@----------------------------------------------------------------------------
;@	mov r11,r11					;@ No$GBA breakpoint
	bl pullRegisters
	eatCycles 6
	b m6809CheckIrqs
;@	fetch 6

;@	mov r1,m6809f
;@	orr m6809f,m6809f,#IF
;@	tst r1,#IF
;@rtiFix
;@	ldreq r0,=EIFix
;@	streq r0,m6809NextTimeout
;@	streq cycles,m6809OldCycles
;@	andeq cycles,cycles,#CYC_MASK
;@	fetchForce
;@----------------------------------------------------------------------------
_3C:	;@ CWAI				Wait for interrupt
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	readMemIM8
	decodeFLG
	eor r0,r0,#0xFF
	bic m6809f,m6809f,r0
	orr m6809f,m6809f,#EF
	bl pushRegisters
;@	sub m6809pc,m6809pc,#2
	eatCycles 4								;@ Instruction takes 4 cycles at least
	mvns r0,cycles,asr#CYC_SHIFT+2			;@
	addmi cycles,cycles,r0,lsl#CYC_SHIFT+2	;@ Consume all remaining cycles in steps of 4.
	orr cycles,cycles,#CYC_CWAI
	ldr pc,[m6809optbl,#m6809NextTimeout]
;@----------------------------------------------------------------------------
_3D:	;@ MUL				Unsigned A * B
;@----------------------------------------------------------------------------
	bic m6809f,m6809f,#PSR_Z+PSR_C		;@ Clear ZC
	mov m6809a,m6809a,lsr#16
	mov m6809b,m6809b,lsr#16
	muls m6809a,m6809b,m6809a
	orreq m6809f,m6809f,#PSR_Z			;@ Set PSR_Z
	movs m6809b,m6809a,lsl#8
	orrmi m6809f,m6809f,#PSR_C			;@ Set PSR_C
	and m6809a,m6809a,#0xFF000000
	fetch 11
;@----------------------------------------------------------------------------
;@_3E:		;@ Reset / SWI 0
;@----------------------------------------------------------------------------
;@	mov r11,r11					;@ No$GBA breakpoint
;@	ldr addy,=0xFFFE			;@ Get Reset vector
;@	b swiEntry
;@----------------------------------------------------------------------------
_3F:	;@ SWI 1
;@----------------------------------------------------------------------------
;@	mov r11,r11					;@ No$GBA breakpoint
	ldr addy,=0xFFFA			;@ Get SWI1 vector
	b swiEntry
;@----------------------------------------------------------------------------
_103F:	;@ SWI 2
;@----------------------------------------------------------------------------
;@	mov r11,r11					;@ No$GBA breakpoint
	ldr addy,=0xFFF4			;@ Get SWI2 vector
	mov r0,#0					;@ Don't inhibit interrupts
	b swi2Entry
;@----------------------------------------------------------------------------
_113F:	;@ SWI 3
;@----------------------------------------------------------------------------
;@	mov r11,r11					;@ No$GBA breakpoint
	ldr addy,=0xFFF2			;@ Get SWI3 vector
	mov r0,#0					;@ Don't inhibit interrupts
	b swi3Entry
	.pool
;@----------------------------------------------------------------------------
_40:	;@ NEGA
;@----------------------------------------------------------------------------
	opNEGR m6809a
	fetch 2
;@----------------------------------------------------------------------------
_43:	;@ COMA
;@----------------------------------------------------------------------------
	opCOMR m6809a
	fetch 2
;@----------------------------------------------------------------------------
_44:	;@ LSRA
;@----------------------------------------------------------------------------
	opLSRR m6809a
	fetch 2
;@----------------------------------------------------------------------------
_46:	;@ RORA
;@----------------------------------------------------------------------------
	opRORR m6809a
	fetch 2
;@----------------------------------------------------------------------------
_47:	;@ ASRA
;@----------------------------------------------------------------------------
	opASRR m6809a
	fetch 2
;@----------------------------------------------------------------------------
_48:	;@ LSLA
;@----------------------------------------------------------------------------
	opLSLR m6809a
	fetch 2
;@----------------------------------------------------------------------------
_49:	;@ ROLA
;@----------------------------------------------------------------------------
	opROLR m6809a
	fetch 2
;@----------------------------------------------------------------------------
_4A:	;@ DECA
;@----------------------------------------------------------------------------
	opDECR m6809a
	fetch 2
;@----------------------------------------------------------------------------
_4C:	;@ INCA
;@----------------------------------------------------------------------------
	opINCR m6809a
	fetch 2
;@----------------------------------------------------------------------------
_4D:	;@ TSTA
;@----------------------------------------------------------------------------
	opTSTR m6809a
	fetch 2
;@----------------------------------------------------------------------------
_104F:	;@ CLRA
_4F:	;@ CLRA
;@----------------------------------------------------------------------------
	opCLRR m6809a
	fetch 2
;@----------------------------------------------------------------------------
_50:	;@ NEGB
;@----------------------------------------------------------------------------
	opNEGR m6809b
	fetch 2
;@----------------------------------------------------------------------------
_53:	;@ COMB
;@----------------------------------------------------------------------------
	opCOMR m6809b
	fetch 2
;@----------------------------------------------------------------------------
_54:	;@ LSRB
;@----------------------------------------------------------------------------
	opLSRR m6809b
	fetch 2
;@----------------------------------------------------------------------------
_56:	;@ RORB
;@----------------------------------------------------------------------------
	opRORR m6809b
	fetch 2
;@----------------------------------------------------------------------------
_57:	;@ ASRB
;@----------------------------------------------------------------------------
	opASRR m6809b
	fetch 2
;@----------------------------------------------------------------------------
_58:	;@ LSLB
;@----------------------------------------------------------------------------
	opLSLR m6809b
	fetch 2
;@----------------------------------------------------------------------------
_59:	;@ ROLB
;@----------------------------------------------------------------------------
	opROLR m6809b
	fetch 2
;@----------------------------------------------------------------------------
_5A:	;@ DECB
;@----------------------------------------------------------------------------
	opDECR m6809b
	fetch 2
;@----------------------------------------------------------------------------
_5C:	;@ INCB
;@----------------------------------------------------------------------------
	opINCR m6809b
	fetch 2
;@----------------------------------------------------------------------------
_5D:	;@ TSTB
;@----------------------------------------------------------------------------
	opTSTR m6809b
	fetch 2
;@----------------------------------------------------------------------------
_5F:	;@ CLRB
;@----------------------------------------------------------------------------
	opCLRR m6809b
	fetch 2

;@----------------------------------------------------------------------------
_60:	;@ NEG Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opNEG
	writeMem8
	fetch 6
;@----------------------------------------------------------------------------
_63:	;@ COM Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opCOM
	writeMem8
	fetch 6
;@----------------------------------------------------------------------------
_64:	;@ LSR Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opLSR
	writeMem8
	fetch 6
;@----------------------------------------------------------------------------
_66:	;@ ROR Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opROR
	writeMem8
	fetch 6
;@----------------------------------------------------------------------------
_67:	;@ ASR Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opASR
	writeMem8
	fetch 6
;@----------------------------------------------------------------------------
_68:	;@ LSL Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opLSL
	writeMem8
	fetch 6
;@----------------------------------------------------------------------------
_69:	;@ ROL Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opROL
	writeMem8
	fetch 6
;@----------------------------------------------------------------------------
_6A:	;@ DEC Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opDEC
	writeMem8
	fetch 6
;@----------------------------------------------------------------------------
_6C:	;@ INC Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opINC
	writeMem8
	fetch 6
;@----------------------------------------------------------------------------
_6D:	;@ TST Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opTST
	fetch 6
;@----------------------------------------------------------------------------
_6E:	;@ JMP indexed
;@----------------------------------------------------------------------------
	bl fetchIdxAdr
	opJMPEA
	fetch 3
;@----------------------------------------------------------------------------
_6F:	;@ CLR Indexed
;@----------------------------------------------------------------------------
	getAdrIdx
	opCLR
	writeMem8
	fetch 6
;@----------------------------------------------------------------------------
_70:	;@ NEG $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opNEG
	writeMem8
	fetch 7
;@----------------------------------------------------------------------------
_73:	;@ COM $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opCOM
	writeMem8
	fetch 7
;@----------------------------------------------------------------------------
_74:	;@ LSR $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opLSR
	writeMem8
	fetch 7
;@----------------------------------------------------------------------------
_76:	;@ ROR $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opROR
	writeMem8
	fetch 7
;@----------------------------------------------------------------------------
_77:	;@ ASR $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opASR
	writeMem8
	fetch 7
;@----------------------------------------------------------------------------
_78:	;@ LSL $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opLSL
	writeMem8
	fetch 7
;@----------------------------------------------------------------------------
_79:	;@ ROL $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opROL
	writeMem8
	fetch 7
;@----------------------------------------------------------------------------
_7A:	;@ DEC $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opDEC
	writeMem8
	fetch 7
;@----------------------------------------------------------------------------
_7C:	;@ INC $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opINC
	writeMem8
	fetch 7
;@----------------------------------------------------------------------------
_7D:	;@ TST $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opTST
	fetch 7
;@----------------------------------------------------------------------------
_7E:	;@ JMP $xxxx
;@----------------------------------------------------------------------------
	getAdrExt
	mov addy,addy,lsl#16
	opJMPEA
	fetch 4
;@----------------------------------------------------------------------------
_7F:	;@ CLR $xxxx
;@----------------------------------------------------------------------------
	opCLR
	writeMemEXT8
	fetch 7

;@----------------------------------------------------------------------------
_80:	;@ SUBA #xx
;@----------------------------------------------------------------------------
	readMemIM8
	opSUB m6809a
	fetch 2
;@----------------------------------------------------------------------------
_81:	;@ CMPA #xx
;@----------------------------------------------------------------------------
	readMemIM8
	opCMP m6809a
	fetch 2
;@----------------------------------------------------------------------------
_82:	;@ SBCA #xx
;@----------------------------------------------------------------------------
	readMemIM8
	opSBC m6809a
	fetch 2
;@----------------------------------------------------------------------------
_83:	;@ SUBD #xxxx
;@----------------------------------------------------------------------------
	readMemIM16
	opSUBD
	fetch 4
;@----------------------------------------------------------------------------
_1083:	;@ CMPD #xxxx
;@----------------------------------------------------------------------------
	readMemIM16
	opCMPD
	fetch 4
;@----------------------------------------------------------------------------
_1183:	;@ CMPU #xxxx
;@----------------------------------------------------------------------------
	readMemIM16
	opCMPU
	fetch 4
;@----------------------------------------------------------------------------
_84:	;@ ANDA #xx
;@----------------------------------------------------------------------------
	readMemIM8
	opAND m6809a
	fetch 2
;@----------------------------------------------------------------------------
_85:	;@ BITA #xx
;@----------------------------------------------------------------------------
	readMemIM8
	opBIT m6809a
	fetch 2
;@----------------------------------------------------------------------------
_86:	;@ LDA #xx
;@----------------------------------------------------------------------------
	readMemIM8
	opLD8 m6809a
	fetch 2
;@----------------------------------------------------------------------------
;@_87:		;@ STA #xx			Illegal
;@----------------------------------------------------------------------------
;@	fetch 2
;@----------------------------------------------------------------------------
_88:	;@ EORA #xx
;@----------------------------------------------------------------------------
	readMemIM8
	opEOR m6809a
	fetch 2
;@----------------------------------------------------------------------------
_89:	;@ ADCA #xx
;@----------------------------------------------------------------------------
	readMemIM8
	opADC m6809a
	fetch 2
;@----------------------------------------------------------------------------
_8A:	;@ ORA #xx
;@----------------------------------------------------------------------------
	readMemIM8
	opOR m6809a
	fetch 2
;@----------------------------------------------------------------------------
_8B:	;@ ADDA #xx
;@----------------------------------------------------------------------------
	readMemIM8
	opADD m6809a
	fetch 2
;@----------------------------------------------------------------------------
_8C:	;@ CMPX #xxxx
;@----------------------------------------------------------------------------
	readMemIM16
	opCMP16 m6809x
	fetch 4
;@----------------------------------------------------------------------------
_108C:	;@ CMPY #xxxx
;@----------------------------------------------------------------------------
	readMemIM16
	opCMP16 m6809y
	fetch 4
;@----------------------------------------------------------------------------
_118C:	;@ CMPS #xxxx
;@----------------------------------------------------------------------------
	readMemIM16
	opCMP16 m6809sp
	fetch 4
;@----------------------------------------------------------------------------
_8D:	;@ BSR
;@----------------------------------------------------------------------------
	ldrsb r1,[m6809pc],#1
	loadLastBank r0
	sub r0,m6809pc,r0
	add m6809pc,m6809pc,r1
	bl pushSP16
	fetch 7
;@----------------------------------------------------------------------------
_8E:	;@ LDX #xxxx
;@----------------------------------------------------------------------------
	readMemIM16
	opLD16 m6809x
	fetch 3
;@----------------------------------------------------------------------------
_108E:	;@ LDY #xxxx
;@----------------------------------------------------------------------------
	readMemIM16
	opLD16 m6809y
	fetch 3
;@----------------------------------------------------------------------------
;@_8F:	;@ STX #xxxx		Illegal
;@----------------------------------------------------------------------------
;@	fetch 2

;@----------------------------------------------------------------------------
_90:	;@ SUBA $xx
;@----------------------------------------------------------------------------
	readMemDP8
	opSUB m6809a
	fetch 4
;@----------------------------------------------------------------------------
_91:	;@ CMPA $xx
;@----------------------------------------------------------------------------
	readMemDP8
	opCMP m6809a
	fetch 4
;@----------------------------------------------------------------------------
_92:	;@ SBCA $xx
;@----------------------------------------------------------------------------
	readMemDP8
	opSBC m6809a
	fetch 4
;@----------------------------------------------------------------------------
_93:	;@ SUBD $xx
;@----------------------------------------------------------------------------
	readMemDP16
	opSUBD
	fetch 6
;@----------------------------------------------------------------------------
_1093:	;@ CMPD $xx
;@----------------------------------------------------------------------------
	readMemDP16
	opCMPD
	fetch 6
;@----------------------------------------------------------------------------
_1193:	;@ CMPU $xx
;@----------------------------------------------------------------------------
	readMemDP16
	opCMPU
	fetch 6
;@----------------------------------------------------------------------------
_94:	;@ ANDA $xx
;@----------------------------------------------------------------------------
	readMemDP8
	opAND m6809a
	fetch 4
;@----------------------------------------------------------------------------
_95:	;@ BITA $xx
;@----------------------------------------------------------------------------
	readMemDP8
	opBIT m6809a
	fetch 4
;@----------------------------------------------------------------------------
_96:	;@ LDA $xx
;@----------------------------------------------------------------------------
	readMemDP8
	opLD8 m6809a
	fetch 4
;@----------------------------------------------------------------------------
_97:	;@ STA $xx
;@----------------------------------------------------------------------------
	getAdrDir
	opST8 m6809a
	fetch 4
;@----------------------------------------------------------------------------
_98:	;@ EORA $xx
;@----------------------------------------------------------------------------
	readMemDP8
	opEOR m6809a
	fetch 4
;@----------------------------------------------------------------------------
_99:	;@ ADCA $xx
;@----------------------------------------------------------------------------
	readMemDP8
	opADC m6809a
	fetch 4
;@----------------------------------------------------------------------------
_9A:	;@ ORA $xx
;@----------------------------------------------------------------------------
	readMemDP8
	opOR m6809a
	fetch 4
;@----------------------------------------------------------------------------
_9B:	;@ ADDA $xx
;@----------------------------------------------------------------------------
	readMemDP8
	opADD m6809a
	fetch 4
;@----------------------------------------------------------------------------
_9C:	;@ CMPX $xx
;@----------------------------------------------------------------------------
	readMemDP16
	opCMP16 m6809x
	fetch 6
;@----------------------------------------------------------------------------
_109C:	;@ CMPY $xx
;@----------------------------------------------------------------------------
	readMemDP16
	opCMP16 m6809y
	fetch 6
;@----------------------------------------------------------------------------
_119C:	;@ CMPS $xx
;@----------------------------------------------------------------------------
	readMemDP16
	opCMP16 m6809sp
	fetch 6
;@----------------------------------------------------------------------------
_9D:	;@ JSR $xx
;@----------------------------------------------------------------------------
	getAdrDir
	loadLastBank r0
	sub r0,m6809pc,r0
	mov m6809pc,addy
	bl pushSP16
	encodePC
	fetch 7
;@----------------------------------------------------------------------------
_9E:	;@ LDX $xx
;@----------------------------------------------------------------------------
	readMemDP16
	opLD16 m6809x
	fetch 5
;@----------------------------------------------------------------------------
_109E:	;@ LDY $xx
;@----------------------------------------------------------------------------
	readMemDP16
	opLD16 m6809y
	fetch 5
;@----------------------------------------------------------------------------
_9F:	;@ STX $xx
;@----------------------------------------------------------------------------
	getAdrDir
	opST16 m6809x
	fetch 5
;@----------------------------------------------------------------------------
_109F:	;@ STY $xx
;@----------------------------------------------------------------------------
	getAdrDir
	opST16 m6809y
	fetch 5

;@----------------------------------------------------------------------------
_A0:	;@ SUBA Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opSUB m6809a
	fetch 4
;@----------------------------------------------------------------------------
_A1:	;@ CMPA Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opCMP m6809a
	fetch 4
;@----------------------------------------------------------------------------
_A2:	;@ SBCA Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opSBC m6809a
	fetch 4
;@----------------------------------------------------------------------------
_A3:	;@ SUBD Indexed
;@----------------------------------------------------------------------------
	readMemIDX16
	opSUBD
	fetch 6
;@----------------------------------------------------------------------------
_10A3:	;@ CMPD Indexed
;@----------------------------------------------------------------------------
	readMemIDX16
	opCMPD
	fetch 6
;@----------------------------------------------------------------------------
_11A3:	;@ CMPU Indexed
;@----------------------------------------------------------------------------
	readMemIDX16
	opCMPU
	fetch 6
;@----------------------------------------------------------------------------
_A4:	;@ ANDA Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opAND m6809a
	fetch 4
;@----------------------------------------------------------------------------
_A5:	;@ BITA Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opBIT m6809a
	fetch 4
;@----------------------------------------------------------------------------
_A6:	;@ LDA Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opLD8 m6809a
	fetch 4
;@----------------------------------------------------------------------------
_A7:	;@ STA Indexed
;@----------------------------------------------------------------------------
	getAdrIdx
	opST8 m6809a
	fetch 4
;@----------------------------------------------------------------------------
_A8:	;@ EORA Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opEOR m6809a
	fetch 4
;@----------------------------------------------------------------------------
_A9:	;@ ADCA Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opADC m6809a
	fetch 4
;@----------------------------------------------------------------------------
_AA:	;@ ORA Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opOR m6809a
	fetch 4
;@----------------------------------------------------------------------------
_AB:	;@ ADDA Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opADD m6809a
	fetch 4
;@----------------------------------------------------------------------------
_AC:	;@ CMPX Indexed
;@----------------------------------------------------------------------------
	readMemIDX16
	opCMP16 m6809x
	fetch 6
;@----------------------------------------------------------------------------
_10AC:	;@ CMPY Indexed
;@----------------------------------------------------------------------------
	readMemIDX16
	opCMP16 m6809y
	fetch 6
;@----------------------------------------------------------------------------
_11AC:	;@ CMPS Indexed
;@----------------------------------------------------------------------------
	readMemIDX16
	opCMP16 m6809sp
	fetch 6
;@----------------------------------------------------------------------------
_AD:	;@ JSR Indexed
;@----------------------------------------------------------------------------
	getAdrIdx
	loadLastBank r0
	sub r0,m6809pc,r0
	mov m6809pc,addy
	bl pushSP16
	encodePC
	fetch 7
;@----------------------------------------------------------------------------
_AE:	;@ LDX Indexed
;@----------------------------------------------------------------------------
	readMemIDX16
	opLD16 m6809x
	fetch 5
;@----------------------------------------------------------------------------
_10AE:	;@ LDY Indexed
;@----------------------------------------------------------------------------
	readMemIDX16
	opLD16 m6809y
	fetch 5
;@----------------------------------------------------------------------------
_AF:	;@ STX Indexed
;@----------------------------------------------------------------------------
	getAdrIdx
	opST16 m6809x
	fetch 5
;@----------------------------------------------------------------------------
_10AF:	;@ STY Indexed
;@----------------------------------------------------------------------------
	getAdrIdx
	opST16 m6809y
	fetch 5

;@----------------------------------------------------------------------------
_B0:	;@ SUBA $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opSUB m6809a
	fetch 5
;@----------------------------------------------------------------------------
_B1:	;@ CMPA $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opCMP m6809a
	fetch 5
;@----------------------------------------------------------------------------
_B2:	;@ SBCA $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opSBC m6809a
	fetch 5
;@----------------------------------------------------------------------------
_B3:	;@ SUBD $xxxx
;@----------------------------------------------------------------------------
	readMemEXT16
	opSUBD
	fetch 7
;@----------------------------------------------------------------------------
_10B3:	;@ CMPD $xxxx
;@----------------------------------------------------------------------------
	readMemEXT16
	opCMPD
	fetch 7
;@----------------------------------------------------------------------------
_11B3:	;@ CMPU $xxxx
;@----------------------------------------------------------------------------
	readMemEXT16
	opCMPU
	fetch 7
;@----------------------------------------------------------------------------
_B4:	;@ ANDA $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opAND m6809a
	fetch 5
;@----------------------------------------------------------------------------
_B5:	;@ BITA $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opBIT m6809a
	fetch 5
;@----------------------------------------------------------------------------
_B6:	;@ LDA $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opLD8 m6809a
	fetch 5
;@----------------------------------------------------------------------------
_B7:	;@ STA $xxxx
;@----------------------------------------------------------------------------
	getAdrExt
	opST8 m6809a
	fetch 5
;@----------------------------------------------------------------------------
_B8:	;@ EORA $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opEOR m6809a
	fetch 5
;@----------------------------------------------------------------------------
_B9:	;@ ADCA $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opADC m6809a
	fetch 5
;@----------------------------------------------------------------------------
_BA:	;@ ORA $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opOR m6809a
	fetch 5
;@----------------------------------------------------------------------------
_BB:	;@ ADDA $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opADD m6809a
	fetch 5
;@----------------------------------------------------------------------------
_BC:	;@ CMPX $xxxx
;@----------------------------------------------------------------------------
	readMemEXT16
	opCMP16 m6809x
	fetch 7
;@----------------------------------------------------------------------------
_10BC:	;@ CMPY $xxxx
;@----------------------------------------------------------------------------
	readMemEXT16
	opCMP16 m6809y
	fetch 7
;@----------------------------------------------------------------------------
_11BC:	;@ CMPS $xxxx
;@----------------------------------------------------------------------------
	readMemEXT16
	opCMP16 m6809sp
	fetch 7
;@----------------------------------------------------------------------------
_BD:	;@ JSR $xxxx
;@----------------------------------------------------------------------------
	getAdrExt
	loadLastBank r0
	sub r0,m6809pc,r0
	mov m6809pc,addy
	bl pushSP16
	encodePC
	fetch 8
;@----------------------------------------------------------------------------
_BE:	;@ LDX $xxxx
;@----------------------------------------------------------------------------
	readMemEXT16
	opLD16 m6809x
	fetch 6
;@----------------------------------------------------------------------------
_10BE:	;@ LDY $xxxx
;@----------------------------------------------------------------------------
	readMemEXT16
	opLD16 m6809y
	fetch 6
;@----------------------------------------------------------------------------
_BF:	;@ STX $xxxx
;@----------------------------------------------------------------------------
	getAdrExt
	opST16 m6809x
	fetch 6
;@----------------------------------------------------------------------------
_10BF:	;@ STY $xxxx
;@----------------------------------------------------------------------------
	getAdrExt
	opST16 m6809y
	fetch 6

;@----------------------------------------------------------------------------
_C0:	;@ SUBB #xx
;@----------------------------------------------------------------------------
	readMemIM8
	opSUB m6809b
	fetch 2
;@----------------------------------------------------------------------------
_C1:	;@ CMPB #xx
;@----------------------------------------------------------------------------
	readMemIM8
	opCMP m6809b
	fetch 2
;@----------------------------------------------------------------------------
_C2:	;@ SBCB #xx
;@----------------------------------------------------------------------------
	readMemIM8
	opSBC m6809b
	fetch 2
;@----------------------------------------------------------------------------
_C3:	;@ ADDD #xxxx
;@----------------------------------------------------------------------------
	readMemIM16
	opADDD
	fetch 4
;@----------------------------------------------------------------------------
_C4:	;@ ANDB #xx
;@----------------------------------------------------------------------------
	readMemIM8
	opAND m6809b
	fetch 2
;@----------------------------------------------------------------------------
_C5:	;@ BITB #xx
;@----------------------------------------------------------------------------
	readMemIM8
	opBIT m6809b
	fetch 2
;@----------------------------------------------------------------------------
_C6:	;@ LDB #xx
;@----------------------------------------------------------------------------
	readMemIM8
	opLD8 m6809b
	fetch 2
;@----------------------------------------------------------------------------
;@_C7:	;@ STB #xx			Illegal
;@----------------------------------------------------------------------------
;@	fetch 2
;@----------------------------------------------------------------------------
_C8:	;@ EORB #xx
;@----------------------------------------------------------------------------
	readMemIM8
	opEOR m6809b
	fetch 2
;@----------------------------------------------------------------------------
_C9:	;@ ADCB #xx
;@----------------------------------------------------------------------------
	readMemIM8
	opADC m6809b
	fetch 2
;@----------------------------------------------------------------------------
_CA:	;@ ORB #xx
;@----------------------------------------------------------------------------
	readMemIM8
	opOR m6809b
	fetch 2
;@----------------------------------------------------------------------------
_CB:	;@ ADDB #xx
;@----------------------------------------------------------------------------
	readMemIM8
	opADD m6809b
	fetch 2
;@----------------------------------------------------------------------------
_CC:	;@ LDD #xxxx
;@----------------------------------------------------------------------------
	readMemIM8
	movs m6809a,r0,lsl#24
	bic m6809f,m6809f,#PSR_N+PSR_Z+PSR_V
	orrmi m6809f,m6809f,#PSR_N
	readMemIM8
	movs m6809b,r0,lsl#24
	orrs r0,m6809a,m6809b
	orreq m6809f,m6809f,#PSR_Z
	fetch 3
;@----------------------------------------------------------------------------
_CE:	;@ LDU #xxxx
;@----------------------------------------------------------------------------
	readMemIM16
	opLDU
	fetch 3
;@----------------------------------------------------------------------------
_10CE:	;@ LDS #xxxx
;@----------------------------------------------------------------------------
	readMemIM16
	opLD16 m6809sp
	fetch 3

;@----------------------------------------------------------------------------
_D0:	;@ SUBB $xx
;@----------------------------------------------------------------------------
	readMemDP8
	opSUB m6809b
	fetch 4
;@----------------------------------------------------------------------------
_D1:	;@ CMPB $xx
;@----------------------------------------------------------------------------
	readMemDP8
	opCMP m6809b
	fetch 4
;@----------------------------------------------------------------------------
_D2:	;@ SBCB $xx
;@----------------------------------------------------------------------------
	readMemDP8
	opSBC m6809b
	fetch 4
;@----------------------------------------------------------------------------
_D3:	;@ ADDD $xx
;@----------------------------------------------------------------------------
	readMemDP16
	opADDD
	fetch 6
;@----------------------------------------------------------------------------
_D4:	;@ ANDB $xx
;@----------------------------------------------------------------------------
	readMemDP8
	opAND m6809b
	fetch 4
;@----------------------------------------------------------------------------
_D5:	;@ BITB $xx
;@----------------------------------------------------------------------------
	readMemDP8
	opBIT m6809b
	fetch 4
;@----------------------------------------------------------------------------
_D6:	;@ LDB $xx
;@----------------------------------------------------------------------------
	readMemDP8
	opLD8 m6809b
	fetch 4
;@----------------------------------------------------------------------------
_D7:	;@ STB $xx
;@----------------------------------------------------------------------------
	getAdrDir
	opST8 m6809b
	fetch 4
;@----------------------------------------------------------------------------
_D8:	;@ EORB $xx
;@----------------------------------------------------------------------------
	readMemDP8
	opEOR m6809b
	fetch 4
;@----------------------------------------------------------------------------
_D9:	;@ ADCB $xx
;@----------------------------------------------------------------------------
	readMemDP8
	opADC m6809b
	fetch 4
;@----------------------------------------------------------------------------
_DA:	;@ ORB $xx
;@----------------------------------------------------------------------------
	readMemDP8
	opOR m6809b
	fetch 4
;@----------------------------------------------------------------------------
_DB:	;@ ADDB $xx
;@----------------------------------------------------------------------------
	readMemDP8
	opADD m6809b
	fetch 4
;@----------------------------------------------------------------------------
_DC:	;@ LDD $xx
;@----------------------------------------------------------------------------
	getAdrDir
	readMem8
	movs m6809a,r0,lsl#24
	bic m6809f,m6809f,#PSR_N+PSR_Z+PSR_V
	orrmi m6809f,m6809f,#PSR_N
	add addy,addy,#1
	readMem8
	movs m6809b,r0,lsl#24
	orrs r0,m6809a,m6809b
	orreq m6809f,m6809f,#PSR_Z
	fetch 5
;@----------------------------------------------------------------------------
_DD:	;@ STD $xx
;@----------------------------------------------------------------------------
	getAdrDir
	opSTD
	fetch 5
;@----------------------------------------------------------------------------
_DE:	;@ LDU $xx
;@----------------------------------------------------------------------------
	readMemDP16
	opLDU
	fetch 5
;@----------------------------------------------------------------------------
_10DE:	;@ LDS $xx
;@----------------------------------------------------------------------------
	readMemDP16
	opLD16 m6809sp
	fetch 5
;@----------------------------------------------------------------------------
_DF:	;@ STU $xx
;@----------------------------------------------------------------------------
	getAdrDir
	opSTU
	fetch 5
;@----------------------------------------------------------------------------
_10DF:	;@ STS $xx
;@----------------------------------------------------------------------------
	getAdrDir
	opST16 m6809sp
	fetch 5

;@----------------------------------------------------------------------------
_E0:	;@ SUBB Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opSUB m6809b
	fetch 4
;@----------------------------------------------------------------------------
_E1:	;@ CMPB Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opCMP m6809b
	fetch 4
;@----------------------------------------------------------------------------
_E2:	;@ SBCB Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opSBC m6809b
	fetch 4
;@----------------------------------------------------------------------------
_E3:	;@ ADDD Indexed
;@----------------------------------------------------------------------------
	readMemIDX16
	opADDD
	fetch 6
;@----------------------------------------------------------------------------
_E4:	;@ ANDB Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opAND m6809b
	fetch 4
;@----------------------------------------------------------------------------
_E5:	;@ BITB Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opBIT m6809b
	fetch 4
;@----------------------------------------------------------------------------
_E6:	;@ LDB Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opLD8 m6809b
	fetch 4
;@----------------------------------------------------------------------------
_E7:	;@ STB Indexed
;@----------------------------------------------------------------------------
	getAdrIdx
	opST8 m6809b
	fetch 4
;@----------------------------------------------------------------------------
_E8:	;@ EORB Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opEOR m6809b
	fetch 4
;@----------------------------------------------------------------------------
_E9:	;@ ADCB Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opADC m6809b
	fetch 4
;@----------------------------------------------------------------------------
_EA:	;@ ORB Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opOR m6809b
	fetch 4
;@----------------------------------------------------------------------------
_EB:	;@ ADDB Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	opADD m6809b
	fetch 4
;@----------------------------------------------------------------------------
_EC:	;@ LDD Indexed
;@----------------------------------------------------------------------------
	readMemIDX8
	movs m6809a,r0,lsl#24
	bic m6809f,m6809f,#PSR_N+PSR_Z+PSR_V
	orrmi m6809f,m6809f,#PSR_N
	add addy,addy,#1
	readMem8
	movs m6809b,r0,lsl#24
	orrs r0,m6809a,m6809b
	orreq m6809f,m6809f,#PSR_Z
	fetch 5
;@----------------------------------------------------------------------------
_ED:	;@ STD Indexed
;@----------------------------------------------------------------------------
	getAdrIdx
	opSTD
	fetch 5
;@----------------------------------------------------------------------------
_EE:	;@ LDU Indexed
;@----------------------------------------------------------------------------
	readMemIDX16
	opLDU
	fetch 5
;@----------------------------------------------------------------------------
_10EE:	;@ LDS Indexed
;@----------------------------------------------------------------------------
	readMemIDX16
	opLD16 m6809sp
	fetch 5
;@----------------------------------------------------------------------------
_EF:	;@ STU Indexed
;@----------------------------------------------------------------------------
	getAdrIdx
	opSTU
	fetch 5
;@----------------------------------------------------------------------------
_10EF:	;@ STS Indexed
;@----------------------------------------------------------------------------
	getAdrIdx
	opST16 m6809sp
	fetch 5

;@----------------------------------------------------------------------------
_F0:	;@ SUBB $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opSUB m6809b
	fetch 5
;@----------------------------------------------------------------------------
_F1:	;@ CMPB $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opCMP m6809b
	fetch 5
;@----------------------------------------------------------------------------
_F2:	;@ SBCB $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opSBC m6809b
	fetch 5
;@----------------------------------------------------------------------------
_F3:	;@ ADDD $xxxx
;@----------------------------------------------------------------------------
	readMemEXT16
	opADDD
	fetch 7
;@----------------------------------------------------------------------------
_F4:	;@ ANDB $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opAND m6809b
	fetch 5
;@----------------------------------------------------------------------------
_F5:	;@ BITB $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opBIT m6809b
	fetch 5
;@----------------------------------------------------------------------------
_F6:	;@ LDB $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opLD8 m6809b
	fetch 5
;@----------------------------------------------------------------------------
_F7:	;@ STB $xxxx
;@----------------------------------------------------------------------------
	getAdrExt
	opST8 m6809b
	fetch 5
;@----------------------------------------------------------------------------
_F8:	;@ EORB $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opEOR m6809b
	fetch 5
;@----------------------------------------------------------------------------
_F9:	;@ ADCB $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opADC m6809b
	fetch 5
;@----------------------------------------------------------------------------
_FA:	;@ ORB $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opOR m6809b
	fetch 5
;@----------------------------------------------------------------------------
_FB:	;@ ADDB $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	opADD m6809b
	fetch 5
;@----------------------------------------------------------------------------
_FC:	;@ LDD $xxxx
;@----------------------------------------------------------------------------
	readMemEXT8
	movs m6809a,r0,lsl#24
	bic m6809f,m6809f,#PSR_N+PSR_Z+PSR_V
	orrmi m6809f,m6809f,#PSR_N
	add addy,addy,#1
	readMem8
	movs m6809b,r0,lsl#24
	orrs r0,m6809a,m6809b
	orreq m6809f,m6809f,#PSR_Z
	fetch 6
;@----------------------------------------------------------------------------
_FD:	;@ STD $xxxx
;@----------------------------------------------------------------------------
	getAdrExt
	opSTD
	fetch 6
;@----------------------------------------------------------------------------
_FE:	;@ LDU $xxxx
;@----------------------------------------------------------------------------
	readMemEXT16
	opLDU
	fetch 6
;@----------------------------------------------------------------------------
_10FE:	;@ LDS $xxxx
;@----------------------------------------------------------------------------
	readMemEXT16
	opLD16 m6809sp
	fetch 6
;@----------------------------------------------------------------------------
_FF:	;@ STU $xxxx
;@----------------------------------------------------------------------------
	getAdrExt
	opSTU
	fetch 6
;@----------------------------------------------------------------------------
_10FF:	;@ STS $xxxx
;@----------------------------------------------------------------------------
	getAdrExt
	opST16 m6809sp
	fetch 6



;@----------------------------------------------------------------------------
_10:	;@ Page1 Extensions
;@----------------------------------------------------------------------------
	eatCycles 1
#ifdef KONAMI6809
	loadLastBank r1
	sub r1,m6809pc,r1
#endif
	ldrb r0,[m6809pc],#1
#ifdef KONAMI6809
	eor r0,r0,#0x22
	tst r1,#0x02
	eorne r0,r0,#0xA0
	tst r1,#0x08
	eorne r0,r0,#0x0A
#endif
	ldr pc,[pc,r0,lsl#2]
	.long 0
;@----------------------------------------------------------------------------
_10Table:
	.long _10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP
	.long _10,  _11,  _10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP
	.long _1020,_1021,_1022,_1023,_1024,_1025,_1026,_1027,_1028,_1029,_102A,_102B,_102C,_102D,_102E,_102F
	.long _10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_103F
	.long _10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_104F
	.long _10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP
	.long _10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP
	.long _10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP
	.long _10NP,_10NP,_10NP,_1083,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_108C,_10NP,_108E,_10NP
	.long _10NP,_10NP,_10NP,_1093,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_109C,_10NP,_109E,_109F
	.long _10NP,_10NP,_10NP,_10A3,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10AC,_10NP,_10AE,_10AF
	.long _10NP,_10NP,_10NP,_10B3,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10BC,_10NP,_10BE,_10BF
	.long _10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10CE,_10NP
	.long _10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10DE,_10DF
	.long _10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10EE,_10EF
	.long _10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10NP,_10FE,_10FF
;@----------------------------------------------------------------------------
_11:	;@ Page2 Extensions
;@----------------------------------------------------------------------------
	eatCycles 1
#ifdef KONAMI6809
	loadLastBank r1
	sub r1,m6809pc,r1
#endif
	ldrb r0,[m6809pc],#1
#ifdef KONAMI6809
	eor r0,r0,#0x22
	tst r1,#0x02
	eorne r0,r0,#0xA0
	tst r1,#0x08
	eorne r0,r0,#0x0A
#endif
	ldr pc,[pc,r0,lsl#2]
	.long 0
;@----------------------------------------------------------------------------
_11Table:
	.long _11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP
	.long _10,  _11,  _11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP
	.long _11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP
	.long _11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_113F
	.long _11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP
	.long _11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP
	.long _11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP
	.long _11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP
	.long _11NP,_11NP,_11NP,_1183,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_118C,_11NP,_11NP,_11NP
	.long _11NP,_11NP,_11NP,_1193,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_119C,_11NP,_11NP,_11NP
	.long _11NP,_11NP,_11NP,_11A3,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11AC,_11NP,_11NP,_11NP
	.long _11NP,_11NP,_11NP,_11B3,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11BC,_11NP,_11NP,_11NP
	.long _11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP
	.long _11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP
	.long _11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP
	.long _11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP,_11NP



;@----------------------------------------------------------------------------
readFromDP8:
;@----------------------------------------------------------------------------
	getAdrDir
	readMem8NoLr
;@----------------------------------------------------------------------------
readFromDP16:
;@----------------------------------------------------------------------------
	getAdrDir
	readMem16NoLr
	bx lr
;@----------------------------------------------------------------------------
writeToDP8:
;@----------------------------------------------------------------------------
	getAdrDir
	writeMem8NoLr
;@----------------------------------------------------------------------------
writeToDP16:
;@----------------------------------------------------------------------------
	getAdrDir
	writeMem16NoLr

;@----------------------------------------------------------------------------
pushRegisters:
;@----------------------------------------------------------------------------
	stmfd sp!,{lr}

	loadLastBank r0
	sub r0,m6809pc,r0
	bl pushSP16
	tst m6809f,#EF
	beq dontPushAllRegs
	ldr r0,[m6809optbl,#m6809US]
	mov r0,r0,lsr#16
	bl pushSP16
	mov r0,m6809y,lsr#16
	bl pushSP16
	mov r0,m6809x,lsr#16
	bl pushSP16
	mov r0,m6809dp,lsr#24
	bl pushSP8
	mov r0,m6809b,lsr#24
	bl pushSP8
	mov r0,m6809a,lsr#24
	bl pushSP8
	eatCycles 9
dontPushAllRegs:
	bl pushSP8_F
	eatCycles 3

	ldmfd sp!,{lr}
	bx lr
;@----------------------------------------------------------------------------
pullRegisters:				;@ Only used by RTI right now
;@----------------------------------------------------------------------------
	stmfd sp!,{lr}

	bl pullSP8
	and m6809f,m6809f,#0xFF000000
	orr m6809f,m6809f,r0

	ands r0,m6809f,#VF|CF
	teqne r0,#VF|CF
	eorne m6809f,m6809f,#VF|CF

	tst m6809f,#EF
	beq dontPullAllRegs
	bl pullSP8
	mov m6809a,r0,lsl#24
	bl pullSP8
	mov m6809b,r0,lsl#24
	bl pullSP8
	and m6809dp,m6809dp,#0x000000FF
	orr m6809dp,m6809dp,r0,lsl#24
	bl pullSP16
	mov m6809x,r0,lsl#16
	bl pullSP16
	mov m6809y,r0,lsl#16
	bl pullSP16
	mov r0,r0,lsl#16
	str r0,[m6809optbl,#m6809US]
	eatCycles 9
dontPullAllRegs:
	bl pullSP16
	mov m6809pc,r0
	encodePC

	ldmfd sp!,{lr}
	bx lr
;@----------------------------------------------------------------------------
pushRegistersSPR0:			;@ r0=registers
;@----------------------------------------------------------------------------
	stmfd sp!,{r0,lr}

	tst r0,#0x80
	ldrne r0,[m6809optbl,#m6809LastBank]
	subne r0,m6809pc,r0
	blne pushSP16
	ldmfd sp,{r0}
	tst r0,#0x40
	ldrne r0,[m6809optbl,#m6809US]
	movne r0,r0,lsr#16
	blne pushSP16
	ldmfd sp,{r0}
	tst r0,#0x20
	movne r0,m6809y,lsr#16
	blne pushSP16
	ldmfd sp,{r0}
	tst r0,#0x10
	movne r0,m6809x,lsr#16
	blne pushSP16
	ldmfd sp,{r0}
	tst r0,#0x08
	movne r0,m6809dp,lsr#24
	blne pushSP8
	ldmfd sp,{r0}
	tst r0,#0x04
	movne r0,m6809b,lsr#24
	blne pushSP8
	ldmfd sp,{r0}
	tst r0,#0x02
	movne r0,m6809a,lsr#24
	blne pushSP8
	ldmfd sp!,{r0}
	tst r0,#0x01
	blne pushSP8_F

	ldmfd sp!,{lr}
	bx lr
;@----------------------------------------------------------------------------
pushRegistersUSR0:			;@ r0=registers
;@----------------------------------------------------------------------------
	stmfd sp!,{r0,lr}

	tst r0,#0x80
	ldrne r0,[m6809optbl,#m6809LastBank]
	subne r0,m6809pc,r0
	blne pushUS16
	ldmfd sp,{r0}
	tst r0,#0x40
	movne r0,m6809sp,lsr#16
	blne pushUS16
	ldmfd sp,{r0}
	tst r0,#0x20
	movne r0,m6809y,lsr#16
	blne pushUS16
	ldmfd sp,{r0}
	tst r0,#0x10
	movne r0,m6809x,lsr#16
	blne pushUS16
	ldmfd sp,{r0}
	tst r0,#0x08
	movne r0,m6809dp,lsr#24
	blne pushUS8
	ldmfd sp,{r0}
	tst r0,#0x04
	movne r0,m6809b,lsr#24
	blne pushUS8
	ldmfd sp,{r0}
	tst r0,#0x02
	movne r0,m6809a,lsr#24
	blne pushUS8
	ldmfd sp!,{r0}
	tst r0,#0x01
	blne pushUS8_F

	ldmfd sp!,{lr}
	bx lr
;@----------------------------------------------------------------------------
pullRegistersSPR0:			;@ r0=registers
;@----------------------------------------------------------------------------
	stmfd sp!,{r0,lr}

	tst r0,#0x01
	beq noPull7
	bl pullSP8
	and m6809f,m6809f,#0xFF000000
	orr m6809f,m6809f,r0

	ands r0,m6809f,#VF|CF
	teqne r0,#VF|CF
	eorne m6809f,m6809f,#VF|CF

noPull7:
	ldmfd sp,{r0}
	tst r0,#0x02
	beq noPull6
	bl pullSP8
	mov m6809a,r0,lsl#24
noPull6:
	ldmfd sp,{r0}
	tst r0,#0x04
	beq noPull5
	bl pullSP8
	mov m6809b,r0,lsl#24
noPull5:
	ldmfd sp,{r0}
	tst r0,#0x08
	beq noPull4
	bl pullSP8
	and m6809dp,m6809dp,#0x000000FF
	orr m6809dp,m6809dp,r0,lsl#24
noPull4:
	ldmfd sp,{r0}
	tst r0,#0x10
	beq noPull3
	bl pullSP16
	mov m6809x,r0,lsl#16
noPull3:
	ldmfd sp,{r0}
	tst r0,#0x20
	beq noPull2
	bl pullSP16
	mov m6809y,r0,lsl#16
noPull2:
	ldmfd sp,{r0}
	tst r0,#0x40
	beq noPull1
	bl pullSP16
	mov r0,r0,lsl#16
	str r0,[m6809optbl,#m6809US]
noPull1:
	ldmfd sp!,{r0}
	tst r0,#0x80
	beq noPull0
	bl pullSP16
	mov m6809pc,r0
	encodePC
noPull0:

	ldmfd sp!,{lr}
	bx lr
;@----------------------------------------------------------------------------
pullRegistersUSR0:			;@ r0=registers
;@----------------------------------------------------------------------------
	stmfd sp!,{r0,lr}

	tst r0,#0x01
	beq noPull7u
	bl pullUS8
	and m6809f,m6809f,#0xFF000000
	orr m6809f,m6809f,r0

	ands r0,m6809f,#VF|CF
	teqne r0,#VF|CF
	eorne m6809f,m6809f,#VF|CF

noPull7u:
	ldmfd sp,{r0}
	tst r0,#0x02
	beq noPull6u
	bl pullUS8
	mov m6809a,r0,lsl#24
noPull6u:
	ldmfd sp,{r0}
	tst r0,#0x04
	beq noPull5u
	bl pullUS8
	mov m6809b,r0,lsl#24
noPull5u:
	ldmfd sp,{r0}
	tst r0,#0x08
	beq noPull4u
	bl pullUS8
	and m6809dp,m6809dp,#0x000000FF
	orr m6809dp,m6809dp,r0,lsl#24
noPull4u:
	ldmfd sp,{r0}
	tst r0,#0x10
	beq noPull3u
	bl pullUS16
	mov m6809x,r0,lsl#16
noPull3u:
	ldmfd sp,{r0}
	tst r0,#0x20
	beq noPull2u
	bl pullUS16
	mov m6809y,r0,lsl#16
noPull2u:
	ldmfd sp,{r0}
	tst r0,#0x40
	beq noPull1u
	bl pullUS16
	mov m6809sp,r0,lsl#16
noPull1u:
	ldmfd sp!,{r0}
	tst r0,#0x80
	beq noPull0u
	bl pullUS16
	mov m6809pc,r0
	encodePC
noPull0u:

	ldmfd sp!,{lr}
	bx lr
;@----------------------------------------------------------------------------
pushSP8_F:
;@----------------------------------------------------------------------------
	ands r0,m6809f,#VF|CF
	teqne r0,#VF|CF
	and r0,m6809f,#0xFF
	eorne r0,r0,#VF|CF
;@----------------------------------------------------------------------------
pushSP8:
;@----------------------------------------------------------------------------
	sub m6809sp,m6809sp,#0x00010000
	mov addy,m6809sp,lsr#16
	writeMem8NoLr
;@----------------------------------------------------------------------------
pushUS8_F:
;@----------------------------------------------------------------------------
	ands r0,m6809f,#VF|CF
	teqne r0,#VF|CF
	and r0,m6809f,#0xFF
	eorne r0,r0,#VF|CF
;@----------------------------------------------------------------------------
pushUS8:
;@----------------------------------------------------------------------------
	ldr addy,[m6809optbl,#m6809US]
	sub addy,addy,#0x00010000
	str addy,[m6809optbl,#m6809US]
	mov addy,addy,lsr#16
	writeMem8NoLr
;@----------------------------------------------------------------------------
pullSP8:
;@----------------------------------------------------------------------------
	mov addy,m6809sp,lsr#16
	add m6809sp,m6809sp,#0x00010000
	readMem8NoLr
;@----------------------------------------------------------------------------
pullUS8:
;@----------------------------------------------------------------------------
	ldr r1,[m6809optbl,#m6809US]
	mov addy,r1,lsr#16
	add r1,r1,#0x00010000
	str r1,[m6809optbl,#m6809US]
	readMem8NoLr
;@----------------------------------------------------------------------------
pushSP16:
;@----------------------------------------------------------------------------
	sub m6809sp,m6809sp,#0x00020000
	mov addy,m6809sp,lsr#16
	writeMem16NoLr
;@----------------------------------------------------------------------------
pushUS16:
;@----------------------------------------------------------------------------
	ldr addy,[m6809optbl,#m6809US]
	sub addy,addy,#0x00020000
	str addy,[m6809optbl,#m6809US]
	mov addy,addy,lsr#16
	writeMem16NoLr
;@----------------------------------------------------------------------------
pullSP16:
;@----------------------------------------------------------------------------
	mov addy,m6809sp,lsr#16
	add m6809sp,m6809sp,#0x00020000
	readMem16NoLr
	bx lr
;@----------------------------------------------------------------------------
pullUS16:
;@----------------------------------------------------------------------------
	ldr r1,[m6809optbl,#m6809US]
	mov addy,r1,lsr#16
	add r1,r1,#0x00020000
	str r1,[m6809optbl,#m6809US]
	readMem16NoLr
	bx lr

;@----------------------------------------------------------------------------
readIndirectAdr:				;@ Read 16bit value from address in addy.
;@----------------------------------------------------------------------------
;@	mov r11,r11					;@ No$GBA breakpoint
	mov addy,addy,lsr#16
	readMem16NoLr
	mov addy,r0,lsl#16
	bx lr

;@----------------------------------------------------------------------------
fetchIdxAdr:
;@----------------------------------------------------------------------------
	ldrb r0,[m6809pc],#1
	ldr pc,[pc,r0,lsl#2]
	.long 0
;@----------------------------------------------------------------------------
feaTable:
	.long FEA00,FEA00,FEA00,FEA00,FEA00,FEA00,FEA00,FEA00,FEA00,FEA00,FEA00,FEA00,FEA00,FEA00,FEA00,FEA00
	.long FEA00,FEA00,FEA00,FEA00,FEA00,FEA00,FEA00,FEA00,FEA00,FEA00,FEA00,FEA00,FEA00,FEA00,FEA00,FEA00
	.long FEA20,FEA20,FEA20,FEA20,FEA20,FEA20,FEA20,FEA20,FEA20,FEA20,FEA20,FEA20,FEA20,FEA20,FEA20,FEA20
	.long FEA20,FEA20,FEA20,FEA20,FEA20,FEA20,FEA20,FEA20,FEA20,FEA20,FEA20,FEA20,FEA20,FEA20,FEA20,FEA20
	.long FEA40,FEA40,FEA40,FEA40,FEA40,FEA40,FEA40,FEA40,FEA40,FEA40,FEA40,FEA40,FEA40,FEA40,FEA40,FEA40
	.long FEA40,FEA40,FEA40,FEA40,FEA40,FEA40,FEA40,FEA40,FEA40,FEA40,FEA40,FEA40,FEA40,FEA40,FEA40,FEA40
	.long FEA60,FEA60,FEA60,FEA60,FEA60,FEA60,FEA60,FEA60,FEA60,FEA60,FEA60,FEA60,FEA60,FEA60,FEA60,FEA60
	.long FEA60,FEA60,FEA60,FEA60,FEA60,FEA60,FEA60,FEA60,FEA60,FEA60,FEA60,FEA60,FEA60,FEA60,FEA60,FEA60
	.long FEA80,FEA81,FEA82,FEA83,FEA84,FEA85,FEA86,FEAxx,FEA88,FEA89,FEAxx,FEA8B,FEA8C,FEA8D,FEAxx,FEA8F
	.long FEA90,FEA91,FEA92,FEA93,FEA94,FEA95,FEA96,FEAxx,FEA98,FEA99,FEAxx,FEA9B,FEA9C,FEA9D,FEAxx,FEA9F
	.long FEAA0,FEAA1,FEAA2,FEAA3,FEAA4,FEAA5,FEAA6,FEAxx,FEAA8,FEAA9,FEAxx,FEAAB,FEA8C,FEA8D,FEAxx,FEA8F
	.long FEAB0,FEAB1,FEAB2,FEAB3,FEAB4,FEAB5,FEAB6,FEAxx,FEAB8,FEAB9,FEAxx,FEABB,FEA9C,FEA9D,FEAxx,FEA9F
	.long FEAC0,FEAC1,FEAC2,FEAC3,FEAC4,FEAC5,FEAC6,FEAxx,FEAC8,FEAC9,FEAxx,FEACB,FEA8C,FEA8D,FEAxx,FEA8F
	.long FEAD0,FEAD1,FEAD2,FEAD3,FEAD4,FEAD5,FEAD6,FEAxx,FEAD8,FEAD9,FEAxx,FEADB,FEA9C,FEA9D,FEAxx,FEA9F
	.long FEAE0,FEAE1,FEAE2,FEAE3,FEAE4,FEAE5,FEAE6,FEAxx,FEAE8,FEAE9,FEAxx,FEAEB,FEA8C,FEA8D,FEAxx,FEA8F
	.long FEAF0,FEAF1,FEAF2,FEAF3,FEAF4,FEAF5,FEAF6,FEAxx,FEAF8,FEAF9,FEAxx,FEAFB,FEA9C,FEA9D,FEAxx,FEA9F
;@----------------------------------------------------------------------------
FEA00:		;@ EA = X+ofs
;@----------------------------------------------------------------------------
	mov r0,r0,lsl#27
	add addy,m6809x,r0,asr#11
	eatCycles 1
	bx lr
;@----------------------------------------------------------------------------
FEA20:		;@ EA = Y+ofs
;@----------------------------------------------------------------------------
	mov r0,r0,lsl#27
	add addy,m6809y,r0,asr#11
	eatCycles 1
	bx lr
;@----------------------------------------------------------------------------
FEA40:		;@ EA = US+ofs
;@----------------------------------------------------------------------------
	mov r0,r0,lsl#27
	ldr addy,[m6809optbl,#m6809US]
	add addy,addy,r0,asr#11
	eatCycles 1
	bx lr
;@----------------------------------------------------------------------------
FEA60:		;@ EA = SP+ofs
;@----------------------------------------------------------------------------
	mov r0,r0,lsl#27
	add addy,m6809sp,r0,asr#11
	eatCycles 1
	bx lr

;@----------------------------------------------------------------------------
FEA80:		;@ EA = X++
;@----------------------------------------------------------------------------
	mov addy,m6809x
	add m6809x,m6809x,#0x00010000
	eatCycles 2
	bx lr
;@----------------------------------------------------------------------------
FEA81:		;@ EA = X+=2
;@----------------------------------------------------------------------------
	mov addy,m6809x
	add m6809x,m6809x,#0x00020000
	eatCycles 3
	bx lr
;@----------------------------------------------------------------------------
FEA82:		;@ EA = --X
;@----------------------------------------------------------------------------
	sub m6809x,m6809x,#0x00010000
	mov addy,m6809x
	eatCycles 2
	bx lr
;@----------------------------------------------------------------------------
FEA83:		;@ EA = (X-=2)
;@----------------------------------------------------------------------------
	sub m6809x,m6809x,#0x00020000
	mov addy,m6809x
	eatCycles 3
	bx lr
;@----------------------------------------------------------------------------
FEA84:		;@ EA = X
;@----------------------------------------------------------------------------
	mov addy,m6809x
	bx lr
;@----------------------------------------------------------------------------
FEA85:		;@ EA = X+signed(B)
;@----------------------------------------------------------------------------
	add addy,m6809x,m6809b,asr#8
	eatCycles 1
	bx lr
;@----------------------------------------------------------------------------
FEA86:		;@ EA = X+signed(A)
;@----------------------------------------------------------------------------
	add addy,m6809x,m6809a,asr#8
	eatCycles 1
	bx lr
;@----------------------------------------------------------------------------
FEA88:		;@ EA = X+signed#xx
;@----------------------------------------------------------------------------
	ldrsb addy,[m6809pc],#1
	add addy,m6809x,addy,lsl#16
	eatCycles 1
	bx lr
;@----------------------------------------------------------------------------
FEA89:		;@ EA = X+#xxxx
;@----------------------------------------------------------------------------
	ldrb addy,[m6809pc],#1
	ldrb r0,[m6809pc],#1
	orr addy,r0,addy,lsl#8
	add addy,m6809x,addy,lsl#16
	eatCycles 4
	bx lr
;@----------------------------------------------------------------------------
FEA8B:		;@ EA = X+D
;@----------------------------------------------------------------------------
	add addy,m6809x,m6809a
	add addy,addy,m6809b,lsr#8
	eatCycles 4
	bx lr
;@----------------------------------------------------------------------------
FEA8C:		;@ EA = PC+signed#xx
;@----------------------------------------------------------------------------
	ldrsb r0,[m6809pc],#1
	loadLastBank addy
	sub addy,m6809pc,addy
	add addy,addy,r0
	mov addy,addy,lsl#16
	eatCycles 1
	bx lr
;@----------------------------------------------------------------------------
FEA8D:		;@ EA = PC+#xxxx
;@----------------------------------------------------------------------------
	ldrb addy,[m6809pc],#1
	ldrb r0,[m6809pc],#1
	orr r0,r0,addy,lsl#8
	loadLastBank addy
	sub addy,m6809pc,addy
	add addy,addy,r0
	mov addy,addy,lsl#16
	eatCycles 5
	bx lr
;@----------------------------------------------------------------------------
FEA8F:		;@ EA = #xxxx
;@----------------------------------------------------------------------------
	ldrb addy,[m6809pc],#1
	mov addy,addy,lsl#24
	ldrb r0,[m6809pc],#1
	orr addy,addy,r0,lsl#16
	eatCycles 5
	bx lr

;@----------------------------------------------------------------------------
FEA90:		;@ EA = [X++]
;@----------------------------------------------------------------------------
	mov addy,m6809x
	add m6809x,m6809x,#0x00010000
	eatCycles 5
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEA91:		;@ EA = [X+=2]
;@----------------------------------------------------------------------------
	mov addy,m6809x
	add m6809x,m6809x,#0x00020000
	eatCycles 6
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEA92:		;@ EA = [--X]
;@----------------------------------------------------------------------------
	sub m6809x,m6809x,#0x00010000
	mov addy,m6809x
	eatCycles 5
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEA93:		;@ EA = [(X-=2)]
;@----------------------------------------------------------------------------
	sub m6809x,m6809x,#0x00020000
	mov addy,m6809x
	eatCycles 6
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEA94:		;@ EA = [X]
;@----------------------------------------------------------------------------
	mov addy,m6809x
	eatCycles 3
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEA95:		;@ EA = [X+signed(B)]
;@----------------------------------------------------------------------------
	add addy,m6809x,m6809b,asr#8
	eatCycles 4
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEA96:		;@ EA = [X+signed(A)]
;@----------------------------------------------------------------------------
	add addy,m6809x,m6809a,asr#8
	eatCycles 4
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEA98:		;@ EA = [X+signed#xx]
;@----------------------------------------------------------------------------
	ldrsb addy,[m6809pc],#1
	add addy,m6809x,addy,lsl#16
	eatCycles 4
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEA99:		;@ EA = [X+#xxxx]
;@----------------------------------------------------------------------------
	ldrb addy,[m6809pc],#1
	ldrb r0,[m6809pc],#1
	orr addy,r0,addy,lsl#8
	add addy,m6809x,addy,lsl#16
	eatCycles 7
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEA9B:		;@ EA = [X+D]
;@----------------------------------------------------------------------------
	add addy,m6809x,m6809a
	add addy,addy,m6809b,lsr#8
	eatCycles 7
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEA9C:		;@ EA = [PC+signed#xx]
;@----------------------------------------------------------------------------
	ldrsb r0,[m6809pc],#1
	loadLastBank addy
	sub addy,m6809pc,addy
	add addy,addy,r0
	mov addy,addy,lsl#16
	eatCycles 4
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEA9D:		;@ EA = [PC+#xxxx]
;@----------------------------------------------------------------------------
	ldrb addy,[m6809pc],#1
	ldrb r0,[m6809pc],#1
	orr r0,r0,addy,lsl#8
	loadLastBank addy
	sub addy,m6809pc,addy
	add addy,addy,r0
	mov addy,addy,lsl#16
	eatCycles 8
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEA9F:		;@ EA = [#xxxx]
;@----------------------------------------------------------------------------
	ldrb addy,[m6809pc],#1
	mov addy,addy,lsl#24
	ldrb r0,[m6809pc],#1
	orr addy,addy,r0,lsl#16
	eatCycles 5
	b readIndirectAdr

;@----------------------------------------------------------------------------
FEAA0:		;@ EA = Y++
;@----------------------------------------------------------------------------
	mov addy,m6809y
	add m6809y,m6809y,#0x00010000
	eatCycles 2
	bx lr
;@----------------------------------------------------------------------------
FEAA1:		;@ EA = Y+=2
;@----------------------------------------------------------------------------
	mov addy,m6809y
	add m6809y,m6809y,#0x00020000
	eatCycles 3
	bx lr
;@----------------------------------------------------------------------------
FEAA2:		;@ EA = --Y
;@----------------------------------------------------------------------------
	sub m6809y,m6809y,#0x00010000
	mov addy,m6809y
	eatCycles 2
	bx lr
;@----------------------------------------------------------------------------
FEAA3:		;@ EA = (Y-=2)
;@----------------------------------------------------------------------------
	sub m6809y,m6809y,#0x00020000
	mov addy,m6809y
	eatCycles 3
	bx lr
;@----------------------------------------------------------------------------
FEAA4:		;@ EA = Y
;@----------------------------------------------------------------------------
	mov addy,m6809y
	bx lr
;@----------------------------------------------------------------------------
FEAA5:		;@ EA = Y+signed(B)
;@----------------------------------------------------------------------------
	add addy,m6809y,m6809b,asr#8
	eatCycles 1
	bx lr
;@----------------------------------------------------------------------------
FEAA6:		;@ EA = Y+signed(A)
;@----------------------------------------------------------------------------
	add addy,m6809y,m6809a,asr#8
	eatCycles 1
	bx lr
;@----------------------------------------------------------------------------
FEAA8:		;@ EA = Y+signed#xx
;@----------------------------------------------------------------------------
	ldrsb addy,[m6809pc],#1
	add addy,m6809y,addy,lsl#16
	eatCycles 1
	bx lr
;@----------------------------------------------------------------------------
FEAA9:		;@ EA = Y+#xxxx
;@----------------------------------------------------------------------------
	ldrb addy,[m6809pc],#1
	ldrb r0,[m6809pc],#1
	orr addy,r0,addy,lsl#8
	add addy,m6809y,addy,lsl#16
	eatCycles 4
	bx lr
;@----------------------------------------------------------------------------
FEAAB:		;@ EA = Y+D
;@----------------------------------------------------------------------------
	add addy,m6809y,m6809a
	add addy,addy,m6809b,lsr#8
	eatCycles 4
	bx lr
;@----------------------------------------------------------------------------
FEAB0:		;@ EA = [Y++]
;@----------------------------------------------------------------------------
	mov addy,m6809y
	add m6809y,m6809y,#0x00010000
	eatCycles 5
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAB1:		;@ EA = [Y+=2]
;@----------------------------------------------------------------------------
	mov addy,m6809y
	add m6809y,m6809y,#0x00020000
	eatCycles 6
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAB2:		;@ EA = [--Y]
;@----------------------------------------------------------------------------
	sub m6809y,m6809y,#0x00010000
	mov addy,m6809y
	eatCycles 5
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAB3:		;@ EA = [(Y-=2)]
;@----------------------------------------------------------------------------
	sub m6809y,m6809y,#0x00020000
	mov addy,m6809y
	eatCycles 6
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAB4:		;@ EA = [Y]
;@----------------------------------------------------------------------------
	mov addy,m6809y
	eatCycles 3
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAB5:		;@ EA = [Y+signed(B)]
;@----------------------------------------------------------------------------
	add addy,m6809y,m6809b,asr#8
	eatCycles 4
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAB6:		;@ EA = [Y+signed(A)]
;@----------------------------------------------------------------------------
	add addy,m6809y,m6809a,asr#8
	eatCycles 4
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAB8:		;@ EA = [Y+signed#xx]
;@----------------------------------------------------------------------------
	ldrsb addy,[m6809pc],#1
	add addy,m6809y,addy,lsl#16
	eatCycles 4
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAB9:		;@ EA = [Y+#xxxx]
;@----------------------------------------------------------------------------
	ldrb addy,[m6809pc],#1
	ldrb r0,[m6809pc],#1
	orr addy,r0,addy,lsl#8
	add addy,m6809y,addy,lsl#16
	eatCycles 7
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEABB:		;@ EA = [Y+D]
;@----------------------------------------------------------------------------
	add addy,m6809y,m6809a
	add addy,addy,m6809b,lsr#8
	eatCycles 7
	b readIndirectAdr

;@----------------------------------------------------------------------------
FEAC0:		;@ EA = US++
;@----------------------------------------------------------------------------
	ldr addy,[m6809optbl,#m6809US]
	add r0,addy,#0x00010000
	str r0,[m6809optbl,#m6809US]
	eatCycles 2
	bx lr
;@----------------------------------------------------------------------------
FEAC1:		;@ EA = US+=2
;@----------------------------------------------------------------------------
	ldr addy,[m6809optbl,#m6809US]
	add r0,addy,#0x00020000
	str r0,[m6809optbl,#m6809US]
	eatCycles 3
	bx lr
;@----------------------------------------------------------------------------
FEAC2:		;@ EA = --US
;@----------------------------------------------------------------------------
	ldr addy,[m6809optbl,#m6809US]
	sub addy,addy,#0x00010000
	str addy,[m6809optbl,#m6809US]
	eatCycles 2
	bx lr
;@----------------------------------------------------------------------------
FEAC3:		;@ EA = (US-=2)
;@----------------------------------------------------------------------------
	ldr addy,[m6809optbl,#m6809US]
	sub addy,addy,#0x00020000
	str addy,[m6809optbl,#m6809US]
	eatCycles 3
	bx lr
;@----------------------------------------------------------------------------
FEAC4:		;@ EA = US
;@----------------------------------------------------------------------------
	ldr addy,[m6809optbl,#m6809US]
	bx lr
;@----------------------------------------------------------------------------
FEAC5:		;@ EA = US+signed(B)
;@----------------------------------------------------------------------------
	ldr addy,[m6809optbl,#m6809US]
	add addy,addy,m6809b,asr#8
	eatCycles 1
	bx lr
;@----------------------------------------------------------------------------
FEAC6:		;@ EA = US+signed(A)
;@----------------------------------------------------------------------------
	ldr addy,[m6809optbl,#m6809US]
	add addy,addy,m6809a,asr#8
	eatCycles 1
	bx lr
;@----------------------------------------------------------------------------
FEAC8:		;@ EA = US+signed#xx
;@----------------------------------------------------------------------------
	ldrsb r0,[m6809pc],#1
	ldr addy,[m6809optbl,#m6809US]
	add addy,addy,r0,lsl#16
	eatCycles 1
	bx lr
;@----------------------------------------------------------------------------
FEAC9:		;@ EA = US+#xxxx
;@----------------------------------------------------------------------------
	ldrb addy,[m6809pc],#1
	ldrb r0,[m6809pc],#1
	orr r0,r0,addy,lsl#8
	ldr addy,[m6809optbl,#m6809US]
	add addy,addy,r0,lsl#16
	eatCycles 4
	bx lr
;@----------------------------------------------------------------------------
FEACB:		;@ EA = US+D
;@----------------------------------------------------------------------------
	ldr addy,[m6809optbl,#m6809US]
	add addy,addy,m6809a
	add addy,addy,m6809b,lsr#8
	eatCycles 4
	bx lr
;@----------------------------------------------------------------------------
FEAD0:		;@ EA = [US++]
;@----------------------------------------------------------------------------
	ldr addy,[m6809optbl,#m6809US]
	add r0,addy,#0x00010000
	str r0,[m6809optbl,#m6809US]
	eatCycles 5
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAD1:		;@ EA = [US+=2]
;@----------------------------------------------------------------------------
	ldr addy,[m6809optbl,#m6809US]
	add r0,addy,#0x00020000
	str r0,[m6809optbl,#m6809US]
	eatCycles 6
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAD2:		;@ EA = [--US]
;@----------------------------------------------------------------------------
	ldr addy,[m6809optbl,#m6809US]
	sub addy,addy,#0x00010000
	str addy,[m6809optbl,#m6809US]
	eatCycles 5
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAD3:		;@ EA = [(US-=2)]
;@----------------------------------------------------------------------------
	ldr addy,[m6809optbl,#m6809US]
	sub addy,addy,#0x00020000
	str addy,[m6809optbl,#m6809US]
	eatCycles 6
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAD4:		;@ EA = [US]
;@----------------------------------------------------------------------------
	ldr addy,[m6809optbl,#m6809US]
	eatCycles 3
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAD5:		;@ EA = [US+signed(B)]
;@----------------------------------------------------------------------------
	ldr addy,[m6809optbl,#m6809US]
	add addy,addy,m6809b,asr#8
	eatCycles 4
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAD6:		;@ EA = [US+signed(A)]
;@----------------------------------------------------------------------------
	ldr addy,[m6809optbl,#m6809US]
	add addy,addy,m6809a,asr#8
	eatCycles 4
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAD8:		;@ EA = [US+signed#xx]
;@----------------------------------------------------------------------------
	ldrsb r0,[m6809pc],#1
	ldr addy,[m6809optbl,#m6809US]
	add addy,addy,r0,lsl#16
	eatCycles 4
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAD9:		;@ EA = [US+#xxxx]
;@----------------------------------------------------------------------------
	ldrb addy,[m6809pc],#1
	ldrb r0,[m6809pc],#1
	orr r0,r0,addy,lsl#8
	ldr addy,[m6809optbl,#m6809US]
	add addy,addy,r0,lsl#16
	eatCycles 7
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEADB:		;@ EA = [US+D]
;@----------------------------------------------------------------------------
	ldr addy,[m6809optbl,#m6809US]
	add addy,addy,m6809a
	add addy,addy,m6809b,lsr#8
	eatCycles 7
	b readIndirectAdr

;@----------------------------------------------------------------------------
FEAE0:		;@ EA = SP++
;@----------------------------------------------------------------------------
	mov addy,m6809sp
	add m6809sp,m6809sp,#0x00010000
	eatCycles 2
	bx lr
;@----------------------------------------------------------------------------
FEAE1:		;@ EA = SP+=2
;@----------------------------------------------------------------------------
	mov addy,m6809sp
	add m6809sp,m6809sp,#0x00020000
	eatCycles 3
	bx lr
;@----------------------------------------------------------------------------
FEAE2:		;@ EA = --SP
;@----------------------------------------------------------------------------
	sub m6809sp,m6809sp,#0x00010000
	mov addy,m6809sp
	eatCycles 2
	bx lr
;@----------------------------------------------------------------------------
FEAE3:		;@ EA = (SP-=2)
;@----------------------------------------------------------------------------
	sub m6809sp,m6809sp,#0x00020000
	mov addy,m6809sp
	eatCycles 4
	bx lr
;@----------------------------------------------------------------------------
FEAE4:		;@ EA = SP
;@----------------------------------------------------------------------------
	mov addy,m6809sp
	bx lr
;@----------------------------------------------------------------------------
FEAE5:		;@ EA = SP+signed(B)
;@----------------------------------------------------------------------------
	add addy,m6809sp,m6809b,asr#8
	eatCycles 1
	bx lr
;@----------------------------------------------------------------------------
FEAE6:		;@ EA = SP+signed(A)
;@----------------------------------------------------------------------------
	add addy,m6809sp,m6809a,asr#8
	eatCycles 1
	bx lr
;@----------------------------------------------------------------------------
FEAE8:		;@ EA = SP+signed#xx
;@----------------------------------------------------------------------------
	ldrsb addy,[m6809pc],#1
	add addy,m6809sp,addy,lsl#16
	eatCycles 1
	bx lr
;@----------------------------------------------------------------------------
FEAE9:		;@ EA = SP+#xxxx
;@----------------------------------------------------------------------------
	ldrb addy,[m6809pc],#1
	ldrb r0,[m6809pc],#1
	orr addy,r0,addy,lsl#8
	add addy,m6809sp,addy,lsl#16
	eatCycles 4
	bx lr
;@----------------------------------------------------------------------------
FEAEB:		;@ EA = SP+D
;@----------------------------------------------------------------------------
	add addy,m6809sp,m6809a
	add addy,addy,m6809b,lsr#8
	eatCycles 4
	bx lr
;@----------------------------------------------------------------------------
FEAF0:		;@ EA = [SP++]
;@----------------------------------------------------------------------------
	mov addy,m6809sp
	add m6809sp,m6809sp,#0x00010000
	eatCycles 5
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAF1:		;@ EA = [SP+=2]
;@----------------------------------------------------------------------------
	mov addy,m6809sp
	add m6809sp,m6809sp,#0x00020000
	eatCycles 6
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAF2:		;@ EA = [--SP]
;@----------------------------------------------------------------------------
	sub m6809sp,m6809sp,#0x00010000
	mov addy,m6809sp
	eatCycles 5
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAF3:		;@ EA = [(SP-=2)]
;@----------------------------------------------------------------------------
	sub m6809sp,m6809sp,#0x00020000
	mov addy,m6809sp
	eatCycles 6
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAF4:		;@ EA = [SP]
;@----------------------------------------------------------------------------
	mov addy,m6809sp
	eatCycles 3
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAF5:		;@ EA = [SP+signed(B)]
;@----------------------------------------------------------------------------
	add addy,m6809sp,m6809b,asr#8
	eatCycles 4
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAF6:		;@ EA = [SP+signed(A)]
;@----------------------------------------------------------------------------
	add addy,m6809sp,m6809a,asr#8
	eatCycles 4
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAF8:		;@ EA = [SP+signed#xx]
;@----------------------------------------------------------------------------
	ldrsb addy,[m6809pc],#1
	add addy,m6809sp,addy,lsl#16
	eatCycles 4
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAF9:		;@ EA = [SP+#xxxx]
;@----------------------------------------------------------------------------
	ldrb addy,[m6809pc],#1
	ldrb r0,[m6809pc],#1
	orr addy,r0,addy,lsl#8
	add addy,m6809sp,addy,lsl#16
	eatCycles 7
	b readIndirectAdr
;@----------------------------------------------------------------------------
FEAFB:		;@ EA = [SP+D]
;@----------------------------------------------------------------------------
	add addy,m6809sp,m6809a
	add addy,addy,m6809b,lsr#8
	eatCycles 7
	b readIndirectAdr


;@----------------------------------------------------------------------------
m6809SetNMIPin:
;@----------------------------------------------------------------------------
	cmp r0,#0
	movne r0,#NF
	ldr r1,[m6809optbl,#m6809PendingIrqs]
	strb r0,[m6809optbl,#m6809NmiPin]
	bics r0,r0,r1,lsr#8
	orrne r1,r1,#NF
	strbne r1,[m6809optbl,#m6809PendingIrqs]
	bx lr
;@----------------------------------------------------------------------------
m6809SetFIRQPin:
;@----------------------------------------------------------------------------
	cmp r0,#0
	ldrb r0,[m6809optbl,#m6809PendingIrqs]
	orrne r0,r0,#FF
	biceq r0,r0,#FF
	strb r0,[m6809optbl,#m6809PendingIrqs]
	bx lr
;@----------------------------------------------------------------------------
m6809SetIRQPin:
;@----------------------------------------------------------------------------
	cmp r0,#0
	ldrb r0,[m6809optbl,#m6809PendingIrqs]
	orrne r0,r0,#IF
	biceq r0,r0,#IF
	strb r0,[m6809optbl,#m6809PendingIrqs]
	bx lr


;@----------------------------------------------------------------------------
m6809RestoreAndRunXCycles:	;@ r0 = number of cycles to run
;@----------------------------------------------------------------------------
	add r1,m6809optbl,#m6809Regs
	ldmia r1,{m6809f-m6809pc,m6809sp}	;@ Restore M6809 state
;@----------------------------------------------------------------------------
m6809RunXCycles:			;@ r0 = number of cycles to run
;@----------------------------------------------------------------------------
	add cycles,cycles,r0,lsl#CYC_SHIFT
;@----------------------------------------------------------------------------
m6809CheckIrqs:
;@----------------------------------------------------------------------------
	ldrb r0,[m6809optbl,#m6809PendingIrqs]
	tst r0,#IF+FF+NF
	beq m6809Go
	bic cycles,cycles,#CYC_SYNC
	tst r0,#NF
	bne m6809NMI

	bics r1,r0,m6809f
	beq m6809Go

	tst r1,#FF
	ldrne addy,=0xFFF6			;@ Get FastIRQ vector
	movne r0,#IF|FF
	bicne m6809f,m6809f,#EF
	bne firqEntry

	tst r1,#IF
	ldrne addy,=0xFFF8			;@ Get IRQ vector
	movne r0,#IF
	bne irqEntry
;@----------------------------------------------------------------------------
m6809Go:	;@ Continue running
;@----------------------------------------------------------------------------
	tst cycles,#CYC_SYNC|CYC_CWAI
	bne _13
	fetch 0

;@----------------------------------------------------------------------------
//m6809IRQ:
;@----------------------------------------------------------------------------
;@	ldr addy,=0xFFFE			;@ Reset vector
;@	ldr addy,=0xFFFC			;@ NMI vector
;@	ldr addy,=0xFFFA			;@ SWI1 vector
;@	ldr addy,=0xFFF8			;@ IRQ vector
;@	ldr addy,=0xFFF6			;@ FastIRQ vector
;@	ldr addy,=0xFFF4			;@ SWI2 vector
;@	ldr addy,=0xFFF2			;@ SWI3 vector
;@	ldr addy,=0xFFF0			;@ Reserved vector

;@----------------------------------------------------------
m6809NMI:
;@----------------------------------------------------------
	bic r0,r0,#NF
	strb r0,[m6809optbl,#m6809PendingIrqs]
	ldr addy,=0xFFFC			;@ Get NMI vector
nmiEntry:
swiEntry:
	mov r0,#IF|FF
swi2Entry:
swi3Entry:
irqEntry:
	orr m6809f,m6809f,#EF
firqEntry:
;@	mov r11,r11					;@ No$GBA breakpoint

	stmfd sp!,{r0,addy}
	tst cycles,#CYC_CWAI
	bleq pushRegisters
	ldmfd sp!,{r0,addy}
	orr m6809f,m6809f,r0		;@ Inhibit IRQs
	bic cycles,cycles,#CYC_CWAI

	readMem16
	mov m6809pc,r0
	encodePC
	fetch 7
;@----------------------------------------------------------------------------
EIFix:	;@ ei should be delayed by 1 instruction.
;@----------------------------------------------------------------------------
	ldr r0,[m6809optbl,#m6809OldCycles]
	ldr r1,[m6809optbl,#m6809NextTimeout_]
	str r1,[m6809optbl,#m6809NextTimeout]
	mov r0,r0,lsr#CYC_SHIFT			;@ Don't add any cpu bits.
	b m6809RunXCycles
;@----------------------------------------------------------------------------




;@----------------------------------------------------------------------------
#ifdef GBA
	.section .ewram, "ax"		;@ For the GBA
#else
	.section .text				;@ For everything else
#endif
	.align 2
;@----------------------------------------------------------------------------
_xx:	;@ ???				invalid opcode
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	loadLastBank r0
	sub r0,m6809pc,r0
;@	[ DEBUG
;@		adr r0,_xx
;@		mov r1,#0
;@		bl debug_
;@	]
	fetch 2
;@----------------------------------------------------------------------------
_01:	;@ NEG Direct, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	b _00
;@----------------------------------------------------------------------------
_02:	;@ NEG/COM Direct, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	tst m6809f,#PSR_C
	beq _00
	bne _03
;@----------------------------------------------------------------------------
_05:	;@ LSR Direct, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	b _04
;@----------------------------------------------------------------------------
_0B:	;@ DEC Direct, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	b _0A
;@----------------------------------------------------------------------------
_14:	;@ HCF
_15:	;@ HCF
_CD:	;@ HCF
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	ldr r0,=0x4CF
	sub m6809pc,m6809pc,#1
	clearCycles
	fetch 1
;@----------------------------------------------------------------------------
_18:	;@ ???, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	and r0,m6809f,#PSR_I+PSR_V		;@ Mask I & V
	bic m6809f,m6809f,#0xFF			;@ Clear all flags
	tst r0,#PSR_I
	orrne m6809f,m6809f,#PSR_H		;@ I to H
	tst r0,#PSR_V
	orrne m6809f,m6809f,#PSR_Z		;@ V to Z
	fetch 2
;@----------------------------------------------------------------------------
_38:	;@ ANDCC? undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	eatCycles 1
	b _1C
;@----------------------------------------------------------------------------
_41:	;@ NEGA, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	b _40
;@----------------------------------------------------------------------------
_42:	;@ NEGA/COMA, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	tst m6809f,#PSR_C
	beq _40
	bne _43
;@----------------------------------------------------------------------------
_45:	;@ LSRA, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	b _44
;@----------------------------------------------------------------------------
_4B:	;@ DECA, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	b _4A
;@----------------------------------------------------------------------------
_4E:	;@ CLRA, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	b _4F
;@----------------------------------------------------------------------------
_51:	;@ NEGB, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	b _50
;@----------------------------------------------------------------------------
_52:	;@ NEGB/COMB, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	tst m6809f,#PSR_C
	beq _50
	bne _53
;@----------------------------------------------------------------------------
_55:	;@ LSRB, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	b _54
;@----------------------------------------------------------------------------
_5B:	;@ DECB, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	b _5A
;@----------------------------------------------------------------------------
_5E:	;@ CLRB, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	b _5F
;@----------------------------------------------------------------------------
_61:	;@ NEG Indexed, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	b _60
;@----------------------------------------------------------------------------
_62:	;@ NEG/COM Indexed, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	tst m6809f,#PSR_C
	beq _60
	bne _63
;@----------------------------------------------------------------------------
_65:	;@ LSR Indexed, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	b _64
;@----------------------------------------------------------------------------
_6B:	;@ DEC Indexed, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	b _6A
;@----------------------------------------------------------------------------
_71:	;@ NEG $xxxx, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	b _70
;@----------------------------------------------------------------------------
_72:	;@ NEG/COM $xxxx, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	tst m6809f,#PSR_C
	beq _70
	bne _73
;@----------------------------------------------------------------------------
_75:	;@ LSR $xxxx, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	b _74
;@----------------------------------------------------------------------------
_7B:	;@ DEC $xxxx, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	b _7A
;@----------------------------------------------------------------------------
_87:	;@ ???, undocumented
_C7:	;@ ???, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	readMemIM8
	orr m6809f,m6809f,#PSR_N		;@ Set N
	bic m6809f,m6809f,#PSR_Z+PSR_V	;@ Clear ZV
	fetch 2
;@----------------------------------------------------------------------------
_8F:	;@ STX, undocumented
_CF:	;@ STU, undocumented
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	readMemIM16
	orr m6809f,m6809f,#PSR_N		;@ Set N
	bic m6809f,m6809f,#PSR_Z+PSR_V	;@ Clear ZV
	fetch 3

;@----------------------------------------------------------------------------
FEAxx:
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	loadLastBank r0
	sub r0,m6809pc,r0
	mov addy,#0
	mov r1,#0
	ldr pc,[m6809optbl,#m6809ReadTbl]
;@----------------------------------------------------------------------------
_10NP:		;@ Page1 Extensions
_11NP:		;@ Page2 Extensions
;@----------------------------------------------------------------------------
	mov r11,r11					;@ No$GBA breakpoint
	mov r0,#0x10
	fetch 2

;@----------------------------------------------------------------------------
	.section .text
	.align 2
;@----------------------------------------------------------------------------
m6809Reset:		;@ Called by cpuReset, (r0-r9 are free to use)
;@----------------------------------------------------------------------------
	str lr,[sp,#-4]!

	mov m6809a,#0x00000000
	mov m6809b,#0x00000000
	mov m6809x,#0x00000000
	mov m6809y,#0x00000000
	mov m6809f,#PSR_I+PSR_F
	strb m6809a,[m6809optbl,#m6809PendingIrqs]
	ldr m6809sp,=0xffff0000		;@ SP=FFFF
	str m6809sp,[m6809optbl,#m6809US]
	mov cycles,#0

	;@ (clear irq/nmi/res source)...

	ldr addy,=0xFFFE
	readMem16
	mov m6809pc,r0
	encodePC					;@ Get RESET vector

	add r0,m6809optbl,#m6809Regs
	stmia r0!,{m6809f-m6809pc,m6809sp}
	ldr lr,[sp],#4
	bx lr
;@----------------------------------------------------------------------------
m6809SaveState:			;@ In r0=destination, r1=m6809optbl. Out r0=state size.
	.type   m6809SaveState STT_FUNC
;@----------------------------------------------------------------------------
	stmfd sp!,{r4,m6809optbl,lr}

	sub r4,r0,#m6809Regs
	mov m6809optbl,r1

	add r1,m6809optbl,#m6809Regs
	mov r2,#m6809StateEnd-m6809StateStart	;@ Right now 0x28
	bl memcpy

	;@ Convert copied PC to not offseted.
	ldr r0,[r4,#m6809RegPC]					;@ Offsetted m6809pc
	loadLastBank r2
	sub r0,r0,r2
	str r0,[r4,#m6809RegPC]					;@ Normal m6809pc

	ldmfd sp!,{r4,m6809optbl,lr}
	mov r0,#m6809StateEnd-m6809StateStart	;@ Right now 0x28
	bx lr
;@----------------------------------------------------------------------------
m6809LoadState:			;@ In r0=m6809optbl, r1=source. Out r0=state size.
	.type   m6809LoadState STT_FUNC
;@----------------------------------------------------------------------------
	stmfd sp!,{m6809pc,m6809optbl,lr}

	mov m6809optbl,r0
	add r0,m6809optbl,#m6809Regs
	mov r2,#m6809StateEnd-m6809StateStart	;@ Right now 0x28
	bl memcpy

	ldr m6809pc,[m6809optbl,#m6809RegPC]		;@ Normal m6809pc
	encodePC
	str m6809pc,[m6809optbl,#m6809RegPC]		;@ Rewrite offseted m6809pc

	ldmfd sp!,{m6809pc,m6809optbl,lr}
;@----------------------------------------------------------------------------
m6809GetStateSize:		;@ Out r0=state size.
	.type   m6809GetStateSize STT_FUNC
;@----------------------------------------------------------------------------
	mov r0,#m6809StateEnd-m6809StateStart	;@ Right now 0x28
	bx lr
;@----------------------------------------------------------------------------
#ifdef NDS
	.section .dtcm, "ax", %progbits				;@ For the NDS ARM9
#elif GBA
	.section .iwram, "ax", %progbits			;@ For the GBA
#endif
;@----------------------------------------------------------------------------
m6809OpTable:
	.long _00,_01,_02,_03,_04,_05,_06,_07,_08,_09,_0A,_0B,_0C,_0D,_0E,_0F
	.long _10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_1A,_1B,_1C,_1D,_1E,_1F
	.long _20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_2A,_2B,_2C,_2D,_2E,_2F
	.long _30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_3A,_3B,_3C,_3D,_xx,_3F
	.long _40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_4A,_4B,_4C,_4D,_4E,_4F
	.long _50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_5A,_5B,_5C,_5D,_5E,_5F
	.long _60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_6A,_6B,_6C,_6D,_6E,_6F
	.long _70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_7A,_7B,_7C,_7D,_7E,_7F
	.long _80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_8A,_8B,_8C,_8D,_8E,_8F
	.long _90,_91,_92,_93,_94,_95,_96,_97,_98,_99,_9A,_9B,_9C,_9D,_9E,_9F
	.long _A0,_A1,_A2,_A3,_A4,_A5,_A6,_A7,_A8,_A9,_AA,_AB,_AC,_AD,_AE,_AF
	.long _B0,_B1,_B2,_B3,_B4,_B5,_B6,_B7,_B8,_B9,_BA,_BB,_BC,_BD,_BE,_BF
	.long _C0,_C1,_C2,_C3,_C4,_C5,_C6,_C7,_C8,_C9,_CA,_CB,_CC,_CD,_CE,_CF
	.long _D0,_D1,_D2,_D3,_D4,_D5,_D6,_D7,_D8,_D9,_DA,_DB,_DC,_DD,_DE,_DF
	.long _E0,_E1,_E2,_E3,_E4,_E5,_E6,_E7,_E8,_E9,_EA,_EB,_EC,_ED,_EE,_EF
	.long _F0,_F1,_F2,_F3,_F4,_F5,_F6,_F7,_F8,_F9,_FA,_FB,_FC,_FD,_FE,_FF

	;@ m6809ReadTbl
	.space 8*4		;@ $0000-FFFF
	;@ m6809WriteTbl
	.space 8*4		;@ $0000-FFFF
	;@ m6809MemTbl
	.space 8*4		;@ $0000-FFFF

m6809StateStart:
	;@ group these together for save/loadstate
	.space 8*4 ;@ m6809Regs			(flg,a,b,x,y,cycles,pc,sp)
	.long 0 ;@ m6809US:
	.byte 0 ;@ m6809PendingIrqs:	(interrupt flags)
	.byte 0 ;@ m6809NmiPin:
	.space 2 ;@ m6809Padding:
m6809StateEnd:
	.long 0 ;@ m6809LastBank:		Last memmap added to PC (used to calculate current PC)
	.long 0 ;@ m6809OldCycles:		Backup of cycles
	.long 0 ;@ m6809NextTimeout_:	Backup of nexttimeout
	.long 0 ;@ m6809NextTimeout:	Jump here when cycles runs out
;@----------------------------------------------------------------------------

#endif // #ifdef __arm__
